<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+Github托管(Windows)的简单示例</title>
    <url>/2020/02/18/Hexo-Github%E6%89%98%E7%AE%A1-Windows-%E7%9A%84%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<p>首先，所有东西都在这里：<a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a></p>
<h5 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git: https:&#x2F;&#x2F;git-scm.com&#x2F;download&#x2F;win</span><br><span class="line">Node.js: https:&#x2F;&#x2F;nodejs.org&#x2F;zh-cn&#x2F;</span><br><span class="line">#Nodejs推荐安装LTS长期支持版</span><br></pre></td></tr></table></figure>

<h6 id="确认Git和Node版本"><a href="#确认Git和Node版本" class="headerlink" title="确认Git和Node版本"></a>确认Git和Node版本</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git version</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>#教程基于git 2.2.5.0 windows, node v12.16.0, npm v6.13.4</p>
<h5 id="安装hexo-cli"><a href="#安装hexo-cli" class="headerlink" title="安装hexo-cli"></a>安装hexo-cli</h5><p><code>npm install hexo-cli -g</code></p>
<h6 id="确认Hexo安装版本"><a href="#确认Hexo安装版本" class="headerlink" title="确认Hexo安装版本"></a>确认Hexo安装版本</h6><p><code>hexo -v</code></p>
<p>视网络环境不同，下载安装速度不同，国内网络一般过程比较久</p>
<h6 id="设置PowerShell执行策略允许签名脚本运行"><a href="#设置PowerShell执行策略允许签名脚本运行" class="headerlink" title="设置PowerShell执行策略允许签名脚本运行"></a>设置PowerShell执行策略允许签名脚本运行</h6><p>出于安全目的，Win10默认不允许运行外部脚本，需要设置策略允许。</p>
<p><code>Set-ExecutionPolicy RemoteSigned</code></p>
<h5 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h5><p><code>hexo init</code></p>
<p>根据网络环境不同，初始化速度不同。可能会出现依赖缺失，根据提示执行 <code>npm install</code> 即可</p>
<h5 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h5><p>用文本软件编辑blog/_config.yml，详细介绍参考<a href="https://hexo.io/docs/configuration.html">https://hexo.io/docs/configuration.html</a></p>
<h6 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#网站设置</span><br><span class="line"></span><br><span class="line">#标题</span><br><span class="line">title: Hexo</span><br><span class="line">#副标题</span><br><span class="line">subtitle: &#39;&#39;</span><br><span class="line">#介绍, 可用于SEO</span><br><span class="line">description: &#39;&#39;</span><br><span class="line">#关键词, 可用于SEO, 逗号隔开</span><br><span class="line">keywords:</span><br><span class="line">#作者</span><br><span class="line">author: John Doe</span><br><span class="line">#语言</span><br><span class="line">language: zh</span><br><span class="line">#时间区域</span><br><span class="line">timezone: &#39;Asia&#x2F;Shanghai&#39;</span><br><span class="line"></span><br><span class="line">#网站链接</span><br><span class="line">url: http:&#x2F;&#x2F;yoursite.com</span><br><span class="line"></span><br><span class="line">#部署</span><br><span class="line">deploy:</span><br><span class="line">  type: &#39;git&#39;</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;yourusername&#x2F;yourusername.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h5 id="生成博客内容"><a href="#生成博客内容" class="headerlink" title="生成博客内容"></a>生成博客内容</h5><p><code>hexo g</code> 或者 <code>hexo generate</code></p>
<h5 id="启动Hexo-临时Server"><a href="#启动Hexo-临时Server" class="headerlink" title="启动Hexo (临时Server)"></a>启动Hexo (临时Server)</h5><p><code>hexo s</code> 或者 <code>hexo server</code></p>
<p>默认访问地址为localhost:4000，可通过局域网访问</p>
<h5 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h5><p> 基于Theme Next Gemini</p>
<p><a href="https://gemini.theme-next.org/">https://gemini.theme-next.org</a></p>
<p><a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a></p>
<h6 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd blog</span><br><span class="line">mkdir themes&#x2F;next</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>

<p>git clone完成后编辑blogs/_config.yml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<h6 id="配置Next主题"><a href="#配置Next主题" class="headerlink" title="配置Next主题"></a>配置Next主题</h6><p>编辑themes/next/_config.yml</p>
<h6 id="主要内容-1"><a href="#主要内容-1" class="headerlink" title="主要内容"></a>主要内容</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#语言</span><br><span class="line">language: zh-CN		#Next默认英文语言, 需要手动加入该行, 在themes&#x2F;next&#x2F;languages内查看支持语言</span><br><span class="line"></span><br><span class="line">#网站图标</span><br><span class="line">favicon:</span><br><span class="line"></span><br><span class="line">#页面脚部</span><br><span class="line">footer:</span><br><span class="line"></span><br><span class="line">#主题组合类型</span><br><span class="line">scheme: Gemini</span><br><span class="line"></span><br><span class="line">#菜单设置</span><br><span class="line">menu:</span><br><span class="line">menu_settings:</span><br><span class="line"></span><br><span class="line">#侧边栏</span><br><span class="line">sidebar:</span><br><span class="line"></span><br><span class="line">#头像</span><br><span class="line">avatar:</span><br><span class="line"></span><br><span class="line">#社交媒体</span><br><span class="line">social:				#社交媒体永久链接</span><br><span class="line">social_icons:		#社交媒体图标</span><br><span class="line"></span><br><span class="line">#文章设置</span><br><span class="line">post_meta:			#文章元素设置</span><br><span class="line">tag_icon:			#标签tag图标</span><br><span class="line">reward_settings: 	#打赏设置</span><br><span class="line">reward:				#打赏图片</span><br><span class="line"></span><br><span class="line">#其他主题设定</span><br><span class="line">text_align:			#文字排版</span><br><span class="line">codeblock:			#代码块样式设置</span><br><span class="line">back2top:			#返回顶部按钮</span><br><span class="line">reading_progress:	#阅读进度</span><br><span class="line">bookmark:			#书签</span><br><span class="line">github_banner:		#页面右上角Github角幅</span><br><span class="line"></span><br><span class="line">#搜索服务</span><br><span class="line">local_search:		#需要安装https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-generator-searchdb</span><br><span class="line"></span><br><span class="line">#动画效果</span><br><span class="line">motion:				#网站动态效果</span><br><span class="line">pace:				#顶部进度条, 需要安装https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-pace</span><br><span class="line">three:				#JS 3D库, 需要安装https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-three</span><br><span class="line">canvas_nest:		#https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-canvas-nest</span><br><span class="line">canvas_ribbon:		#https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-canvas-ribbon</span><br></pre></td></tr></table></figure>

<h6 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h6><p>打开themes/next/config.yml内对应的注释网页，根据提示操作，以搜索功能和pace动画效果为例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd blog</span><br><span class="line">npm install hexo-generator-searchdb</span><br><span class="line">cd themes&#x2F;next</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-pace source&#x2F;lib&#x2F;pace</span><br></pre></td></tr></table></figure>

<h6 id="配置搜索功能-可选"><a href="#配置搜索功能-可选" class="headerlink" title="配置搜索功能 (可选)"></a>配置搜索功能 (可选)</h6><p>编辑blog/_config.yml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#path - file path. By default is search.xml. If the file extension is .json, #the output format will be JSON. Otherwise XML format file will be exported.</span><br><span class="line">#field - the search scope you want to search, you can chose:</span><br><span class="line">#	post (Default) - will only cover all the posts of your blog.</span><br><span class="line">#	page - will only cover all the pages of your blog.</span><br><span class="line">#	all - will cover all the posts and pages of your blog.</span><br><span class="line">#content - whether contains the whole content of each article. If false, the #generated results only cover title and other meta info without mainbody. By #default is true.</span><br><span class="line">#format - the form of the page contents, options are:</span><br><span class="line">#	html (Default) - original html string being minified.</span><br><span class="line">#	striptags - original html string being minified, and remove all the tags.</span><br><span class="line">#	raw - markdown text of each posts or pages.</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br><span class="line">  format: html</span><br></pre></td></tr></table></figure>

<h5 id="Github托管"><a href="#Github托管" class="headerlink" title="Github托管"></a>Github托管</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#登录https:&#x2F;&#x2F;github.com</span><br><span class="line">#创建新仓库New repository</span><br><span class="line">#仓库名指定: yourusername.github.io</span><br></pre></td></tr></table></figure>

<h6 id="配置Github"><a href="#配置Github" class="headerlink" title="配置Github"></a>配置Github</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourusername&quot;</span><br><span class="line">git config --global user.email &quot;youruseremail&quot;</span><br><span class="line">#查看C:\User\yourusername\.ssh是否已有ssh私钥和公钥, id_rsa+id_rsa.pub</span><br><span class="line">#没有则生成ssh-keygen -t rsa -C &quot;xxx@xxx.com&quot;</span><br><span class="line">#在github-settings-SSH and GPG keys添加SSH公钥, 在id_rsa.pub内, 全文复制粘贴id_rsa.pub内容</span><br></pre></td></tr></table></figure>

<h6 id="Hexo部署到Github"><a href="#Hexo部署到Github" class="headerlink" title="Hexo部署到Github"></a>Hexo部署到Github</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd blog</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h5 id="配置Github-Pages实现自定义域名访问"><a href="#配置Github-Pages实现自定义域名访问" class="headerlink" title="配置Github Pages实现自定义域名访问"></a>配置Github Pages实现自定义域名访问</h5><p>前提条件 (以阿里云解析为例)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.拥有一个自己的域名</span><br><span class="line">2.DNS解析服务</span><br></pre></td></tr></table></figure>

<h6 id="①-进入Pages网页手动修改"><a href="#①-进入Pages网页手动修改" class="headerlink" title="①.进入Pages网页手动修改"></a>①.进入Pages网页手动修改</h6><p>访问username.github.io repository的settings，下拉找到”Custom domain”，将其配置为自定义域名，比如domain.com或二级域名blog.domain.com</p>
<img src="/2020/02/18/Hexo-Github%E6%89%98%E7%AE%A1-Windows-%E7%9A%84%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B/Github-Pages配置.png" alt="Github-Pages设置.png" style="zoom: 50%;">

<h6 id="②-部署时指定CNAME"><a href="#②-部署时指定CNAME" class="headerlink" title="②.部署时指定CNAME"></a>②.部署时指定CNAME</h6><p>在博客根目录下的source文件夹创建无扩展名的”CNAME”文件，在里面填入域名，部署到Github时就会自动更改GitHub Pages的自定义域名</p>
<p>source/CNAME &lt;-<code>blog.domain.com</code></p>
<img src="/2020/02/18/Hexo-Github%E6%89%98%E7%AE%A1-Windows-%E7%9A%84%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B/HexoBlog.png" alt="HexoBlog" style="zoom:50%;">

<p>在解析服务中添加CNAME解析</p>
<table>
<thead>
<tr>
<th>记录类型</th>
<th>主机记录</th>
<th>解析线路(运营商)</th>
<th>记录值</th>
</tr>
</thead>
<tbody><tr>
<td>CNAME</td>
<td>@</td>
<td>默认</td>
<td>username.github.io</td>
</tr>
<tr>
<td>CNAME</td>
<td>www</td>
<td>默认</td>
<td>username.github.io</td>
</tr>
</tbody></table>
<p>这样就能直接通过 <a href="http://www.domain.com/">www.domain.com</a> 或 domain.com访问博客</p>
<p>二级域名则直接添加CNAME解析</p>
<table>
<thead>
<tr>
<th>记录类型</th>
<th>主机记录</th>
<th>解析线路(运营商)</th>
<th>记录值</th>
</tr>
</thead>
<tbody><tr>
<td>CNAME</td>
<td>blog</td>
<td>默认</td>
<td>username.github.io</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Letsencrypt免费90天证书简易说明(ACME)</title>
    <url>/2020/02/19/Letsencrypt%E5%85%8D%E8%B4%B990%E5%A4%A9%E8%AF%81%E4%B9%A6%E7%AE%80%E6%98%93%E8%AF%B4%E6%98%8E-ACME/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h3 id="LINUX环境"><a href="#LINUX环境" class="headerlink" title="LINUX环境"></a>LINUX环境</h3><p>#安装 acme.sh<br><code>curl  https://get.acme.sh | sh</code><br>注：将会安装到 ~/.acme.sh/ 目录下，以后所有的配置默认也在这个目录下</p>
<p>#设置 alias:<br><code>alias acme.sh=~/.acme.sh/acme.sh</code><br>#自动创建 cronjob, 每天 0:00 点自动检测所有的证书, 如果快过期了, 需要更新, 则会自动更新证书.</p>
<p>#输入阿里云API KEY环境参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export Ali_Key&#x3D;&quot;填写AccessKey ID&quot;</span><br><span class="line">export Ali_Secret&#x3D;&quot;填写Access Key Secret&quot;</span><br></pre></td></tr></table></figure>

<p>#申请通配域名证书<br><code>acme.sh --issue --dns dns_ali -d example.com -d *.example.com</code><br>#证书生成成功后，默认保存在.acme.sh/example.com/</p>
<p>#更新证书 (–force 强制更新)<br><code>acme.sh --renew --dns -d example.com -d *.example.com --force</code><br>#默认自动60天更新</p>
<p>#转换证书为PKCS12格式（申请到证书之后，默认不带密码参数[–password pfx-password]）<br><code>acme.sh --toPkcs -d example.com</code></p>
<h3 id="Docker-For-Windows（简易版）"><a href="#Docker-For-Windows（简易版）" class="headerlink" title="Docker For Windows（简易版）"></a>Docker For Windows（简易版）</h3><p>#事前准备：<br>1.安装Docker For Windows（<a href="https://docs.docker.com/docker-for-windows/install/%EF%BC%89">https://docs.docker.com/docker-for-windows/install/）</a><br>2.设置共享磁盘（下文以D盘已通过Docker For Windows设置共享为例）</p>
<p>#以管理员身份启动PowerShell<br>#拉取acme.sh镜像<br><code>docker pull neilpang/acme.sh</code></p>
<p>#检查镜像是否下载完成<br><code>docker images</code></p>
<p>#申请通配证书（如果不保留Docker后台运行自动更新证书，可在run后加–rm）<br><code>docker run -d acmedocker -e Ali_Key=填写AccessKey ID -e Ali_Secret=填写Access Key Secret --name=acmedocker neilpang/acme.sh --issue --dns dns_ali -d example.com -d *.example.com</code></p>
<p> </p>
<h3 id="Docker-For-Windows-后台运行自动更新证书）"><a href="#Docker-For-Windows-后台运行自动更新证书）" class="headerlink" title="Docker For Windows(后台运行自动更新证书）"></a>Docker For Windows(后台运行自动更新证书）</h3><p>#事前准备：<br>1.安装Docker for Windows（<a href="https://docs.docker.com/docker-for-windows/install/%EF%BC%89">https://docs.docker.com/docker-for-windows/install/）</a><br>2.设置共享磁盘, Docker for Windows-settings-Shared drivers（下文以D盘已通过Docker For Windows设置共享为例）</p>
<p>#以管理员身份启动PowerShell<br>#拉取acme.sh镜像<br><code>docker pull neilpang/acme.sh</code></p>
<p>#检查镜像是否下载完成<br><code>docker images</code></p>
<p>#编写docker-compose.yml并保存为acmesh.yml（下文默认保存为D:\Docker\Composefiles\acmesh.yml）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &#39;3&#39;</span><br><span class="line">services:</span><br><span class="line">  acmedocker:</span><br><span class="line">    image: neilpang&#x2F;acme.sh</span><br><span class="line">    container_name: acmedocker</span><br><span class="line">    restart: always</span><br><span class="line">    command: </span><br><span class="line">        daemon</span><br><span class="line">    environment:</span><br><span class="line">      - Ali_Key&#x3D;填写AccessKey ID</span><br><span class="line">      - Ali_Secret&#x3D;填写Access Key Secret</span><br></pre></td></tr></table></figure>

<p>*#以后台形式运行neilpang/acme.sh<br><code>docker-compose -f D:\Docker\Composefiles\acmesh.yml up -d acmedocker</code></p>
<p>*#申请通配域名证书<br><code>docker-compose -f D:\Docker\Composefiles\acmesh.yml exec acmedocker --issue --dns dns_ali -d example.com -d *.example.com</code><br>#可选命令：<code>docker exec acmedocker acme.sh --issue --dns dns_ali -d example.com -d *.example.com</code></p>
<p>*#转换证书为PKCS12格式（申请到证书之后，默认不带密码参数[–password pfx-password]）<br><code>docker-compose -f D:\Docker\Composefiles\acmesh.yml exec acme.sh --toPkcs -d example.com</code><br>#可选命令：<code>docker exec acmedocker acme.sh --toPkcs -d example.com</code></p>
<p>*#复制证书到宿主机本地路径（当PowerShell工作目录在D盘时docker cp命令的默认工作路径为D:\）<br><code>docker cp acmedocker:/acme.sh/example.com /Docker</code></p>
<p>*#关闭acmedocker（关闭后所有文件将重置，无法更新证书）<br><code>docker kill acmedocker</code></p>
<p>#带星号*的命令可写入.ps1文件并运行，让PowerShell进行一键搞定</p>
<p>#默认60天更新证书，可强制更新–force<br><code>docker exec acmedocker acme.sh --renew --dns -d example.com -d *.example.com</code></p>
]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建NextCloud (WinServer 2019+Docker for Windows)</title>
    <url>/2020/02/19/%E6%90%AD%E5%BB%BANextCloud-WinServer-2019-Docker-for-Windows/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<p>更新1：在调试中发现发现 Windows Docker 和 MySQL for Windows 之间的互访有严重的问题，目前改用Docker容器构建MariaDB数据库，所有功能一切正常。修改一些过于啰嗦的描述。运行环境有改动。</p>
<h4 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">物理主机系统： Windows server 2019 Datecenter (v1809, 17763.805)</span><br><span class="line">Docker： Docker for windows 2.2.0.4 build 43472(Engine: 19.03.8, Compose: 1.25.4)</span><br><span class="line">Mariadb： Docker (mariadb:latest)</span><br><span class="line">Nginx： Docker (nginx:latest)</span><br><span class="line">Nextcloud： 18.0.2 (hub.docker.com&#x2F;_&#x2F;nextcloud, nextcloud:latest, nextcloud:apache, OS:Linux&#x2F;amd64)</span><br><span class="line">可选附加：</span><br><span class="line">Onlyoffice-document-server：Docker (onlyoffice&#x2F;documentserver:latest)</span><br><span class="line">redis：Docker (redis:latest)</span><br></pre></td></tr></table></figure>

<h4 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h4><h5 id="Nextcloud镜像的选择"><a href="#Nextcloud镜像的选择" class="headerlink" title="Nextcloud镜像的选择"></a>Nextcloud镜像的选择</h5><p>在官方Docker页面中主要版本有默认的Apache版和采用容器化Nginx的FPM版，在我个人实际搭建过程中FPM版的Nginx和宿主机windows之间隔着一层NAT，配置调试起来显得十分麻烦，故选择运行起来更简单的Apache版</p>
<h5 id="容器间互访"><a href="#容器间互访" class="headerlink" title="容器间互访"></a>容器间互访</h5><p>将每个容器的网络加入同一外部Host网络就可以实现容器间通过service name互访</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">networks:</span><br><span class="line">  default:</span><br><span class="line">    external:</span><br><span class="line">      name: shared</span><br></pre></td></tr></table></figure>

<h5 id="Docker-for-windows"><a href="#Docker-for-windows" class="headerlink" title="Docker for windows"></a>Docker for windows</h5><p>安装是全自动创建Docker Host的Hyper-V虚拟机</p>
<h6 id="创建共用网络-关键"><a href="#创建共用网络-关键" class="headerlink" title="创建共用网络 (关键)"></a>创建共用网络 (关键)</h6><p><code>docker network create shared</code></p>
<p>这是后续MariaDB+NextCloud+Nginx互访工作的关键步骤</p>
<h5 id="MariaDB"><a href="#MariaDB" class="headerlink" title="MariaDB"></a>MariaDB</h5><h6 id="MariaDB-yml"><a href="#MariaDB-yml" class="headerlink" title="MariaDB.yml"></a>MariaDB.yml</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  mariadb:</span><br><span class="line">    image: mariadb:latest</span><br><span class="line">    container_name: mariadb</span><br><span class="line">    command: --character-set-server&#x3D;utf8mb4 --collation-server&#x3D;utf8mb4_unicode_ci --innodb-flush-method&#x3D;fsync</span><br><span class="line">    environment:</span><br><span class="line">      - TZ&#x3D;Asia&#x2F;Shanghai</span><br><span class="line">      - MYSQL_ROOT_PASSWORD&#x3D;password  # 必须, root账户的密码</span><br><span class="line">      - MYSQL_LOG_CONSOLE&#x3D;true</span><br><span class="line">    volumes:</span><br><span class="line">      - &#x2F;C&#x2F;Docker&#x2F;mariadb:&#x2F;var&#x2F;lib&#x2F;mysql  			# 建议外置数据</span><br><span class="line">      - &#x2F;C&#x2F;Docker&#x2F;mariadb-conf&#x2F;my.cnf:&#x2F;etc&#x2F;my.cnf	#外置MariaDB配置文件</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    networks:</span><br><span class="line">      - default</span><br><span class="line"></span><br><span class="line">  phpmyadmin:											# 一起搭建方便通过Web操作数据库</span><br><span class="line">    image: phpmyadmin&#x2F;phpmyadmin:4.9.4</span><br><span class="line">    container_name: phpmyadmin</span><br><span class="line">    environment:</span><br><span class="line">      - TZ&#x3D;Asia&#x2F;Shanghai</span><br><span class="line">      - PMA_ARBITRARY&#x3D;1									# 允许PMA访问不同数据库</span><br><span class="line">      - PMA_HOST&#x3D;mariadb								# 默认访问上面的mariadb</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    expose:</span><br><span class="line">      - &#39;80&#39;</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:80											# 转发端口</span><br><span class="line">    networks:</span><br><span class="line">      - default</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  default:</span><br><span class="line">    external:</span><br><span class="line">      name: shared</span><br></pre></td></tr></table></figure>

<h6 id="部署数据库"><a href="#部署数据库" class="headerlink" title="部署数据库"></a>部署数据库</h6><p>通过docker exec -it mariadb bash进入容器内部使用命令操作数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#登入数据库</span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>创建环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建数据库nextcloud</span><br><span class="line">create database nextcloud;</span><br><span class="line"># 创建用户nextcloud</span><br><span class="line">create user nextclouduser@% identified by &#39;password&#39;;</span><br><span class="line"># 给nextcloud用户赋予数据库nextcloud所有权限</span><br><span class="line">grant all privileges on nextcloud.* to nextcloud@% identified by &#39;password&#39;;</span><br><span class="line"># 重载刷新权限</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h4 id="主体搭建部署"><a href="#主体搭建部署" class="headerlink" title="主体搭建部署"></a>主体搭建部署</h4><h5 id="NextCloud"><a href="#NextCloud" class="headerlink" title="NextCloud"></a>NextCloud</h5><h6 id="NextCloud-yml"><a href="#NextCloud-yml" class="headerlink" title="NextCloud.yml"></a>NextCloud.yml</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &#39;3&#39;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  redis:</span><br><span class="line">    image: redis</span><br><span class="line">    container_name: nextcloud-redis</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    networks:</span><br><span class="line">      - default</span><br><span class="line">    expose:</span><br><span class="line">      - &#39;6379&#39;</span><br><span class="line"></span><br><span class="line">  nextcloud:</span><br><span class="line">    image: nextcloud</span><br><span class="line">    container_name: nextcloud</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    depends_on:</span><br><span class="line">      - redis</span><br><span class="line">    environment:</span><br><span class="line">      - TZ&#x3D;Asia&#x2F;Shanghai</span><br><span class="line">    volumes:</span><br><span class="line">      - &#x2F;C&#x2F;Docker&#x2F;nextcloud:&#x2F;var&#x2F;www&#x2F;html					# NextCloud主程序存储路径</span><br><span class="line">      - &#x2F;D&#x2F;Docker&#x2F;nextcloud&#x2F;data:&#x2F;var&#x2F;www&#x2F;html&#x2F;data			# NextCloud数据存储路径</span><br><span class="line">    expose:</span><br><span class="line">      - &#39;80&#39;											# 暴露80端口供Nginx反向代理用</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:80											# 转发8080端口至80端口</span><br><span class="line">    networks:</span><br><span class="line">      - default</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  default:</span><br><span class="line">    external:</span><br><span class="line">      name: shared</span><br></pre></td></tr></table></figure>

<p>主程序挂载到外部是方便在Windows上修改程序配置以及保持程序与数据操作权限统一，但这样在NextCloud程序更新效率和运行效率上会打一点折扣，还会破坏镜像自身内置默认的以www-data运行的crontab，需要外部Windows配置计划任务运行cron.php</p>
<p>如果主程序路径选择volume挂载到Windows系统路径，那么在Docker容器中运行的Nextcloud默认以root用户权限运行，所以在访问时会提示设置权限chmod 0770，无论是chown还是chmod都无法解决，可通过强行忽略文件权限检查解决</p>
<h6 id="忽略数据目录权限检查"><a href="#忽略数据目录权限检查" class="headerlink" title="忽略数据目录权限检查"></a>忽略数据目录权限检查</h6><p>在/var/www/html/config/config.php中加入以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;check_data_directory_permissions&#39; &#x3D;&gt; false,     #检查数据目录权限</span><br></pre></td></tr></table></figure>

<h6 id="添加可信任访问域名"><a href="#添加可信任访问域名" class="headerlink" title="添加可信任访问域名"></a>添加可信任访问域名</h6><p>在/var/www/html/config/config.php添加Trusted_Domains，不然Nextcloud的Web端无法访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;trusted_domains&#39; &#x3D;&gt; </span><br><span class="line">array (</span><br><span class="line">  0 &#x3D;&gt; &#39;example.com&#39;,</span><br><span class="line">  1 -&gt; &#39;localhost&#39;,</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<p>NextCloud初步搭建完成，通过 <a href="http://localhost/">http://localhost:80</a> 或 <a href="http://localhost:8080/">http://localhost:8080</a> 访问NextCloud的Web界面进行初始化操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据库用户名: nextcloud</span><br><span class="line">数据库用户密码: password</span><br><span class="line">数据库名: nextcloud</span><br><span class="line">数据库Host: mariadb</span><br></pre></td></tr></table></figure>

<h5 id="Nginx-HTTPS访问"><a href="#Nginx-HTTPS访问" class="headerlink" title="Nginx (HTTPS访问)"></a>Nginx (HTTPS访问)</h5><h6 id="Nginx-yml"><a href="#Nginx-yml" class="headerlink" title="Nginx.yml"></a>Nginx.yml</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  nginx:</span><br><span class="line">    image: nginx:latest</span><br><span class="line">    container_name: nginx</span><br><span class="line">    volumes:</span><br><span class="line">      - &#x2F;C&#x2F;Docker&#x2F;nginx&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf	# 外置Nginx配置文件</span><br><span class="line">      - &#x2F;C&#x2F;Docker&#x2F;nginx&#x2F;conf:&#x2F;etc&#x2F;nginx&#x2F;conf.d				# 外置Nginx配置文件</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    ports:</span><br><span class="line">      - 8081:443								# 转发10006端口至Nginx监听的443端口</span><br><span class="line">    networks:</span><br><span class="line">      - default</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  default:</span><br><span class="line">    external:</span><br><span class="line">      name: shared</span><br></pre></td></tr></table></figure>

<h6 id="NextCloud-conf"><a href="#NextCloud-conf" class="headerlink" title="NextCloud.conf"></a>NextCloud.conf</h6><pre><code>server &#123;
    listen      443 ssl;                                             #Nginx监听端口
    server_name nc.example.com; #域名, IP, 本地地址都可以填写

    ssl_certificate       /etc/ssl/cert.cer;          # SSL证书路径
    ssl_certificate_key   /etc/ssl/private.key;        # SSL私钥路径
    ssl_protocols SSLv2 SSLv3 TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
    ssl_prefer_server_ciphers on;

    #以下部分为隐藏header, 为了解决nextcloud自检问题
    proxy_hide_header X-Content-Type-Options;
    proxy_hide_header X-Download-Options;
    proxy_hide_header X-Frame-Options;
    proxy_hide_header X-Permitted-Cross-Domain-Policies;
    proxy_hide_header X-Robots-Tag;

    add_header Strict-Transport-Security &quot;max-age=15552000; includeSubDomains; preload&quot; always;
    add_header Referrer-Policy &quot;no-referrer&quot;;
    add_header X-Content-Type-Options nosniff;
    add_header X-Download-Options &quot;noopen&quot;;
    add_header X-Frame-Options &quot;SAMEORIGIN&quot;;
    add_header X-Permitted-Cross-Domain-Policies &quot;none&quot;;
    add_header X-Robots-Tag &quot;none&quot;;
    add_header X-XSS-Protection &quot;1; mode=block&quot;;

    client_max_body_size 10G;
    fastcgi_buffers 64 4K;
    fastcgi_hide_header X-Powered-By;
    
    location / &#123;
        proxy_pass http://nextcloud:80/;                    # 反向代理地址, 通过service name访问
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_buffer_size 64k;
        proxy_buffers 8 64k;
        proxy_busy_buffers_size 64k;
        proxy_temp_file_write_size 64k;
    &#125;

    location = /.well-known/carddav &#123;                     #解决自检carddav未正常配置解析提示问题 
        return 301 $scheme://$http_host/remote.php/dav;
    &#125;

    location = /.well-known/caldav &#123;                       #解决自检carddav未正常配置解析提示问题
        return 301 $scheme://$http_host/remote.php/dav;
    &#125;

    location = /robots.txt &#123;
        allow all;
        log_not_found off;
        access_log off;
    &#125;

    location ~ ^\/(?:build|tests|config|lib|3rdparty|templates|data)\/ &#123;
        deny all;
    &#125;

    location ~ ^\/(?:\.|autotest|occ|issue|indie|db_|console) &#123;
        deny all;
    &#125;

&#125;
</code></pre>
<p>Nextcloud在实际使用中经常出现访问超时，原因是Nextcloud:latest用Apache作为网页服务器监听HTTP 80端口，在Nginx反代中可能无法侦测正确的协议，需要添加参数强行覆写</p>
<p>在NextCloud程序目录的config/config.php中添加以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;overwriteprotocol&#39; &#x3D;&gt; &#39;https&#39;,</span><br></pre></td></tr></table></figure>

<p>至此，NextCloud在公网可通过 <a href="https://example.com:8081/">https://example.com:8081/</a> 访问</p>
<h4 id="可选部分"><a href="#可选部分" class="headerlink" title="可选部分"></a>可选部分</h4><h5 id="Onlyoffice-document-server"><a href="#Onlyoffice-document-server" class="headerlink" title="Onlyoffice-document-server"></a>Onlyoffice-document-server</h5><p>Nextcloud官方提供连接onlyoffice服务的应用，与onlyoffice对接后能实现在NextCloud内直接Web访问打开并编辑office文档 (pptx, xlsx, docs等)，通过Docker可以一键配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &#39;3&#39;</span><br><span class="line">services:</span><br><span class="line">  onlyoffice-document-server:</span><br><span class="line">    container_name: onlyoffice-document-server</span><br><span class="line">    image: onlyoffice&#x2F;documentserver:latest</span><br><span class="line">    stdin_open: true</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    environment:</span><br><span class="line">      - TZ&#x3D;Asia&#x2F;Shanghai</span><br><span class="line">      - ONLYOFFICE_HTTPS_HSTS_ENABLED&#x3D;true							# 启用HTTPS HSTS</span><br><span class="line">      - SSL_CERTIFICATE_PATH&#x3D;&#x2F;var&#x2F;www&#x2F;onlyoffice&#x2F;Data&#x2F;certs&#x2F;cert.cer	# SSL证书路径</span><br><span class="line">      - SSL_KEY_PATH&#x3D;&#x2F;var&#x2F;www&#x2F;onlyoffice&#x2F;Data&#x2F;certs&#x2F;private.key			# SSL私钥路径</span><br><span class="line">      - REDIS_SERVER_HOST&#x3D;onlyoffice-redis</span><br><span class="line">      - REDIS_SERVER_PORT&#x3D;6379</span><br><span class="line">    deploy:</span><br><span class="line">      resources:</span><br><span class="line">        limits:</span><br><span class="line">          cpus: &#39;0.50&#39;</span><br><span class="line">          memory: 2048M</span><br><span class="line">    volumes:</span><br><span class="line">      - &#x2F;D&#x2F;Docker&#x2F;onlyoffice&#x2F;DocumentServer&#x2F;logs:&#x2F;var&#x2F;log&#x2F;onlyoffice		# 外置log</span><br><span class="line">      - &#x2F;D&#x2F;Docker&#x2F;onlyoffice&#x2F;DocumentServer&#x2F;data:&#x2F;var&#x2F;www&#x2F;onlyoffice&#x2F;Data	# 外置data</span><br><span class="line">      - &#x2F;C&#x2F;SSL-Certificates:&#x2F;var&#x2F;www&#x2F;onlyoffice&#x2F;Data&#x2F;certs					# 挂载SSL证书和私钥路径</span><br><span class="line">      - &#x2F;D&#x2F;Docker&#x2F;onlyoffice&#x2F;DocumentServer&#x2F;lib:&#x2F;var&#x2F;lib&#x2F;onlyoffice			# 外置lib</span><br><span class="line">    ports:</span><br><span class="line">      - 8082:443</span><br><span class="line">    depends_on:</span><br><span class="line">      - onlyoffice-redis</span><br><span class="line">    networks:</span><br><span class="line">      - default</span><br><span class="line"></span><br><span class="line">  onlyoffice-redis:</span><br><span class="line">    container_name: onlyoffice-redis</span><br><span class="line">    image: redis:latest</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    networks:</span><br><span class="line">      - default</span><br><span class="line">    expose:</span><br><span class="line">      - &#39;6379&#39;</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  default:</span><br><span class="line">    external:</span><br><span class="line">      name: shared</span><br></pre></td></tr></table></figure>

<h6 id="证书安装"><a href="#证书安装" class="headerlink" title="证书安装"></a>证书安装</h6><ol>
<li><p>在/var/www/onlyoffice/Data中建立 “certs” 文件夹，将SSL证书 (cert.cer) 和私钥 (private.key)放入</p>
</li>
<li><p>修改environment环境参数挂载路径中的文件名称</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">environment:</span><br><span class="line"> - SSL_CERTIFICATE_PATH&#x3D;证书路径</span><br><span class="line"> - SSL_KEY_PATH&#x3D;私钥路径</span><br></pre></td></tr></table></figure>

<p>通过访问<a href="https://example.com:8082/">https://example.com:8082/</a> ，可以查看Document Server运行状况，显示 “Document Server is running” 表示成功</p>
<p>最后在Nextcloud的Onlyoffice连接应用中设置Document Editing Service address为<a href="https://example.com:8082/">https://example.com:8082/</a> </p>
<p>页面下方出现settings一系列选项则表示已成功连接</p>
<h5 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h5><p>Nextcloud官方推荐使用Redis缓存Nextcloud，在上述NextCloud部分已经默认一同部署</p>
<h5 id="邮件提醒"><a href="#邮件提醒" class="headerlink" title="邮件提醒"></a>邮件提醒</h5><p>NextCloud可以使用现有的邮箱服务、用户发送提醒邮件，在网页界面—设置—基本设置—电子邮件服务器中配置</p>
<img src="/2020/02/19/%E6%90%AD%E5%BB%BANextCloud-WinServer-2019-Docker-for-Windows/NextCloud邮件SMTP配置.png" style="zoom:50%;">

<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>主要优点：</p>
<ul>
<li>提供了丰富的扩展可供安装</li>
<li>文件完整地存储在服务器上，方便直接复制备份</li>
</ul>
<p>主要缺点：</p>
<ul>
<li>基于PHP，运行效率有折扣</li>
</ul>
]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建私人图床 (Minio+PicUploader))</title>
    <url>/2020/03/15/%E6%90%AD%E5%BB%BA%E7%A7%81%E4%BA%BA%E5%9B%BE%E5%BA%8A-Minio-PicUploader/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Docker： Docker for windows 2.2.0.3 (Engine: 19.03.5, Compose: 1.25.4)</span><br><span class="line">Nginx： Docker (nginx:latest)</span><br></pre></td></tr></table></figure>

<h4 id="Minio"><a href="#Minio" class="headerlink" title="Minio"></a>Minio</h4><p><a href="https://github.com/minio/minio">官方Github</a></p>
<h5 id="简单运行"><a href="#简单运行" class="headerlink" title="简单运行"></a>简单运行</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull minio&#x2F;minio</span><br><span class="line">docker run -p 9000:9000 minio&#x2F;minio server &#x2F;data</span><br></pre></td></tr></table></figure>

<h5 id="Minio-compose-yml"><a href="#Minio-compose-yml" class="headerlink" title="Minio compose.yml"></a>Minio compose.yml</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  minio:</span><br><span class="line">    image: minio&#x2F;minio</span><br><span class="line">    container_name: minio</span><br><span class="line">    environment:</span><br><span class="line">      - TZ&#x3D;Asia&#x2F;Shanghai</span><br><span class="line">      - MINIO_ACCESS_KEY&#x3D;accesskey				# 管理用户名</span><br><span class="line">      - MINIO_SECRET_KEY&#x3D;secretkey				# 管理密码</span><br><span class="line">    volumes:</span><br><span class="line">      - &#x2F;D&#x2F;Docker&#x2F;minio&#x2F;data:&#x2F;data				#外置存储</span><br><span class="line">      - &#x2F;D&#x2F;Docker&#x2F;minio&#x2F;config:&#x2F;root&#x2F;.minio		#外置配置</span><br><span class="line">    expose:</span><br><span class="line">      - &#39;9000&#39;</span><br><span class="line">    networks:</span><br><span class="line">      - default</span><br><span class="line">    command:</span><br><span class="line">      - server</span><br><span class="line">      - &#x2F;data</span><br><span class="line">    restart: unless-stopped</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  default:</span><br><span class="line">    external:</span><br><span class="line">      name: shared</span><br></pre></td></tr></table></figure>

<h5 id="使用SSL证书"><a href="#使用SSL证书" class="headerlink" title="使用SSL证书"></a>使用SSL证书</h5><p>在/root/.minio中放入证书和私钥文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;root&#x2F;.minio&#x2F;certs&#x2F;public.crt</span><br><span class="line">&#x2F;root&#x2F;.minio&#x2F;certs&#x2F;private.key</span><br></pre></td></tr></table></figure>

<h5 id="使用MinIO"><a href="#使用MinIO" class="headerlink" title="使用MinIO"></a>使用MinIO</h5><ol>
<li><p>访问 <a href="http://localhost:9000/">http://localhost:9000/</a> 进入MinIO管理界面</p>
</li>
<li><p>创建bucket，名称最小3个字符，不允许有大写字母、下划线、特殊字符 如@#等</p>
</li>
<li><p>给bucket内所有文件增加只读策略，实现永久外链访问 (关键步骤) </p>
</li>
</ol>
<h4 id="PicUploader"><a href="#PicUploader" class="headerlink" title="PicUploader"></a>PicUploader</h4><p><a href="https://github.com/xiebruce/PicUploader">官方Github</a></p>
<h5 id="PicUploader-compose-yml"><a href="#PicUploader-compose-yml" class="headerlink" title="PicUploader compose.yml"></a>PicUploader compose.yml</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  picuploader:</span><br><span class="line">    image: leonyff&#x2F;picuploader:latest</span><br><span class="line">    container_name: picuploader</span><br><span class="line">    environment:</span><br><span class="line">      - TZ&#x3D;Asia&#x2F;Shanghai</span><br><span class="line">      - USER&#x3D;user					# Web用户名</span><br><span class="line">      - PASSWD&#x3D;password				# Web用户密码</span><br><span class="line">    volumes:</span><br><span class="line">      - &#x2F;C&#x2F;Docker&#x2F;picuploader&#x2F;config.php:&#x2F;var&#x2F;www&#x2F;PicUploader&#x2F;config&#x2F;config.php		#外挂配置文件</span><br><span class="line">    expose:</span><br><span class="line">      - &#39;80&#39;</span><br><span class="line">    networks:</span><br><span class="line">      - default</span><br><span class="line">    restart: unless-stopped</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  default:</span><br><span class="line">    external:</span><br><span class="line">      name: shared</span><br></pre></td></tr></table></figure>

<p>可访问 <a href="http://localhost/">http://localhost:80</a> 进入WEB界面</p>
<h5 id="配置config-php"><a href="#配置config-php" class="headerlink" title="配置config.php"></a>配置config.php</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">	&#x2F;&#x2F; 开源自建对象存储服务器Minio：https:&#x2F;&#x2F;github.com&#x2F;minio&#x2F;minio</span><br><span class="line">	&#39;minio&#39; &#x3D;&gt; [</span><br><span class="line">		&#39;name&#39; &#x3D;&gt; &#39;Minio&#39;,</span><br><span class="line">		&#39;AccessKeyId&#39; &#x3D;&gt; &#39;accesskey&#39;,</span><br><span class="line">		&#39;AccessKeySecret&#39; &#x3D;&gt; &#39;secretkey&#39;,</span><br><span class="line">		&#x2F;&#x2F;如果你的minio服务器未设置region，那就留空</span><br><span class="line">		&#39;region&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">		&#39;bucket&#39; &#x3D;&gt; &#39;images&#39;,</span><br><span class="line">		&#39;endpoint&#39; &#x3D;&gt; &#39;http(s):&#x2F;&#x2F;域名:端口&#39;,</span><br><span class="line">		&#x2F;&#x2F;自定义域名，如果为空，则默认使用endpoint作为域名</span><br><span class="line">		&#39;domain&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">		&#x2F;&#x2F;自定义目录格式：2019&#x2F;03&#x2F;31</span><br><span class="line">		&#39;directory&#39; &#x3D;&gt; &#39;&#x2F;&#39;,</span><br><span class="line">		&#x2F;&#x2F;使用代理，格式：http:&#x2F;&#x2F;127.0.0.1:1087</span><br><span class="line">		&#39;proxy&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">	],</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<h5 id="Nginx-HTTPS访问-以容器互访为例"><a href="#Nginx-HTTPS访问-以容器互访为例" class="headerlink" title="Nginx HTTPS访问 (以容器互访为例)"></a>Nginx HTTPS访问 (以容器互访为例)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen      443 ssl;</span><br><span class="line">    server_name minio.domain.com;      										# 监听请求域名</span><br><span class="line"></span><br><span class="line">    ssl_certificate       &#x2F;etc&#x2F;ssl&#x2F;cert.cer;								# 证书路径</span><br><span class="line">    ssl_certificate_key   &#x2F;etc&#x2F;ssl&#x2F;private.key;								# 私钥路径</span><br><span class="line">    ssl_protocols SSLv2 SSLv3 TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class="line">    ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">	</span><br><span class="line">    client_max_body_size 10m;</span><br><span class="line">    fastcgi_buffers 64 4K;</span><br><span class="line">    </span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass https:&#x2F;&#x2F;minio:9000&#x2F;;								# 如果minio用了证书，则反代https</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_buffer_size 1M;</span><br><span class="line">        proxy_buffers 8 1M;</span><br><span class="line">        proxy_busy_buffers_size 1M;</span><br><span class="line">        proxy_temp_file_write_size 1M;</span><br><span class="line">        proxy_connect_timeout 300s;</span><br><span class="line">        proxy_send_timeout 300s;</span><br><span class="line">        proxy_read_timeout 300s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PicUploader同理反代80端口，配置好后就能通过 <a href="https://minio.domain.com/">https://minio.domain.com</a> 就访问Web界面了</p>
]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>配置免费图床Chevereto</title>
    <url>/2020/11/11/%E8%87%AA%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8AChevereto/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<p>搭建环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Docker： Docker for windows 2.4.0.0 (Engine: 19.03.13, Compose: 1.27.4)</span><br><span class="line">Chevereto： Lastest（内含Nginx和PHP，linsxserver&#x2F;chevereto）</span><br><span class="line">Mariadb： Latest（mariadb:latest）</span><br></pre></td></tr></table></figure>

<h5 id="Chevereto"><a href="#Chevereto" class="headerlink" title="Chevereto"></a>Chevereto</h5><p><a href="https://github.com/Chevereto/Chevereto-Free">官方Github</a></p>
<h6 id="Chevereto-compose-yml"><a href="#Chevereto-compose-yml" class="headerlink" title="Chevereto compose.yml"></a>Chevereto compose.yml</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  minio:</span><br><span class="line">    image: linuxserver&#x2F;chevereto</span><br><span class="line">    container_name: chevereto</span><br><span class="line">    environment:</span><br><span class="line">      - PUID&#x3D;1000</span><br><span class="line">      - PGID&#x3D;1000</span><br><span class="line">      - TZ&#x3D;Asia&#x2F;Shanghai</span><br><span class="line">    volumes:</span><br><span class="line">      - &#x2F;D&#x2F;Docker&#x2F;chevereto&#x2F;config:&#x2F;config		# 挂载配置文件夹和日志文件夹</span><br><span class="line">      - &#x2F;D&#x2F;Docker&#x2F;chevereto&#x2F;data:&#x2F;data			# 挂载数据文件夹</span><br><span class="line">    expose:									# 搭配跨容器反代用，容器自带Nginx，可改为端口转发的ports</span><br><span class="line">      - &#39;80&#39;</span><br><span class="line">      - &#39;443&#39;</span><br><span class="line">    networks:</span><br><span class="line">      - default</span><br><span class="line">    restart: unless-stopped</span><br><span class="line"></span><br><span class="line">networks:									# 该networks段是为了跨nginx容器反代使用，可不要</span><br><span class="line">  default:</span><br><span class="line">    external:</span><br><span class="line">      name: shared</span><br></pre></td></tr></table></figure>

<p>docker-compose up之后可访问<a href="http://localhost/%E8%AE%BF%E9%97%AE%E7%BD%91%E9%A1%B5%E5%88%9D%E5%A7%8B%E5%8C%96Chevereto">http://localhost/访问网页初始化Chevereto</a></p>
<h6 id="使用SSL证书"><a href="#使用SSL证书" class="headerlink" title="使用SSL证书"></a>使用SSL证书</h6><p>镜像默认自签证书，如果需要使用自己的证书，就在/config/keys中放入证书和私钥文件并重启容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;config&#x2F;keys&#x2F;cert.crt</span><br><span class="line">&#x2F;config&#x2F;keys&#x2F;cert.key</span><br></pre></td></tr></table></figure>

<h6 id="Chevereto初始化"><a href="#Chevereto初始化" class="headerlink" title="Chevereto初始化"></a>Chevereto初始化</h6><p>访问网页端，根据页面流程设置数据库地址、名称、账号、密码，设置Chevereto管理员账号、密码</p>
<h6 id="配置Nginx实现非标准端口访问"><a href="#配置Nginx实现非标准端口访问" class="headerlink" title="配置Nginx实现非标准端口访问"></a>配置Nginx实现非标准端口访问</h6><p>网络拓补：运营商→Modem→主路由（拨号上网+10000端口转发到宿主机同端口）→Docker宿主机→Nginx容器（10000端口转发443）→Chevereto容器</p>
<p>因为博主个人喜好使用单独的Nginx容器统一反代所有容器，这样就可以通过”服务名.xxx.com:10000”访问不同容器内的服务</p>
<p>通过”chevereto.xxx.com:10000”可正常访问使用Chevereto</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen      443 ssl;													# nginx容器自身监听443，外界通过容器的10000端口转发443访问</span><br><span class="line">    server_name chevereto.xxx.com;</span><br><span class="line">    error_page 497 https:&#x2F;&#x2F;$host:10000$request_uri;</span><br><span class="line"></span><br><span class="line">    ssl_certificate       &#x2F;config&#x2F;keys&#x2F;cert.cer;</span><br><span class="line">    ssl_certificate_key   &#x2F;config&#x2F;keys&#x2F;cert.key;</span><br><span class="line">    ssl_protocols SSLv2 SSLv3 TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class="line">    ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">	</span><br><span class="line">    client_max_body_size 10m;</span><br><span class="line">    fastcgi_buffers 64 4K;</span><br><span class="line">    </span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;chevereto&#x2F;;</span><br><span class="line">        proxy_set_header Host $http_host;									# http_host关键</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="配置Chevereto"><a href="#配置Chevereto" class="headerlink" title="配置Chevereto"></a>配置Chevereto</h6><p>修改/config/php/php-local.ini改动图片最大上传大小</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date.timezone &#x3D; Asia&#x2F;Shanghai </span><br><span class="line">upload_max_filesize &#x3D; 200M</span><br><span class="line">post_max_size &#x3D; 200M</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>简单地提升Windows使用效率</title>
    <url>/2020/02/28/%E7%AE%80%E5%8D%95%E5%9C%B0%E6%8F%90%E5%8D%87Windows%E4%BD%BF%E7%94%A8%E6%95%88%E7%8E%87/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<p>Listary</p>
<p><a href="https://www.listary.com/">官方网站</a></p>
<p>全盘关键字搜索、搜索引擎、文件动作、程序启动、菜单、历史记录，侧重于文件定位使用，不过想要完整体验需要Pro版</p>
<hr>
<h5 id="Wox-everything"><a href="#Wox-everything" class="headerlink" title="Wox+everything"></a>Wox+everything</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;Wox-launcher&#x2F;Wox</span><br><span class="line">https:&#x2F;&#x2F;www.voidtools.com&#x2F;zh-cn&#x2F;</span><br></pre></td></tr></table></figure>

<h6 id="依赖环境"><a href="#依赖环境" class="headerlink" title="依赖环境"></a>依赖环境</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.NET: &gt;&#x3D;4.5.2</span><br><span class="line">Python3: https:&#x2F;&#x2F;www.python.org&#x2F;downloads&#x2F;</span><br></pre></td></tr></table></figure>

<p>Wox词典插件：<a href="http://www.wox.one/plugin/184">http://www.wox.one/plugin/184</a></p>
<p>利用Wox调用everything可以实现与Listary差不多的功能，Wox的扩展丰富，开源免费，需要什么功能而扩展没有可以自己造</p>
<hr>
<h5 id="Lily-5-0"><a href="#Lily-5-0" class="headerlink" title="Lily 5.0"></a>Lily 5.0</h5><p><a href="https://www.52pojie.cn/thread-1023114-1-2.html">52pojie帖子</a></p>
<p>和音速启动等一类启动板软件一样，不过它集成了不少功能，如可以直接简单编辑的屏幕截图、屏幕录制mp4、屏幕录制Gif、搭配百度云实现云端OCR</p>
<hr>
<h5 id="Uninstall-Tool"><a href="#Uninstall-Tool" class="headerlink" title="Uninstall Tool"></a>Uninstall Tool</h5><p><a href="https://www.crystalidea.com/uninstall-tool/download">官方网站</a></p>
<p>一键卸载附带深度清理</p>
<hr>
<h5 id="Clash-for-windows"><a href="#Clash-for-windows" class="headerlink" title="Clash for windows"></a>Clash for windows</h5><p><a href="https://github.com/Fndroid/clash_for_windows_pkg">Github</a></p>
<p>Clash的windows版，支持一键下载托管配置，基于规则分流的代理软件</p>
<hr>
<h5 id="Dism"><a href="#Dism" class="headerlink" title="Dism++"></a>Dism++</h5><p><a href="http://www.chuyu.me/zh-Hans/index.html">官方网站</a></p>
<p>基于微软Dism的开源项目，主要功能是系统备份和还原，附带一些垃圾清理功能，这些功能都是基于微软官方的工具套装集成使用</p>
<hr>
<h5 id="Foobar2000"><a href="#Foobar2000" class="headerlink" title="Foobar2000"></a>Foobar2000</h5><p><a href="https://www.foobar2000.org/">官方网站</a></p>
<p>个人推荐使用的本地音乐播放器，简单纯粹</p>
<hr>
<h5 id="Geek-Uninstaller"><a href="#Geek-Uninstaller" class="headerlink" title="Geek Uninstaller"></a>Geek Uninstaller</h5><p><a href="https://geekuninstaller.com/">官方网站</a></p>
<p>和Uninstall Tool差不多，但它的界面更加简洁，功能更加纯粹</p>
<hr>
<h5 id="MouseInc"><a href="#MouseInc" class="headerlink" title="MouseInc"></a>MouseInc</h5><p><a href="https://shuax.com/project/mouseinc/">官方网站</a></p>
<p>一款免费的鼠标全局手势软件，支持绝大部分可调用的系统操作，最关键的是自带免费+识别率颇高的OCR</p>
<hr>
<h5 id="TrafficMonitor"><a href="#TrafficMonitor" class="headerlink" title="TrafficMonitor"></a>TrafficMonitor</h5><p><a href="https://github.com/zhongyang219/TrafficMonitor">Github</a></p>
<p>网速监控悬浮窗软件，可以显示当前网速、CPU及内存利用率，支持嵌入到任务栏显示，支持更换皮肤、历史流量统计等</p>
<hr>
<h5 id="WindowsTabs"><a href="#WindowsTabs" class="headerlink" title="WindowsTabs"></a>WindowsTabs</h5><p><a href="https://github.com/mauricef/WindowTabs">Github</a></p>
<p>将Windows同一程序的不同窗口改成和浏览器一样使用标签页浏览，不过该软件已经多年不维护更新，有些地方会有BUG</p>
]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>王国之心3 Remind 黑暗代码模式分数详情</title>
    <url>/2020/02/19/%E7%8E%8B%E5%9B%BD%E4%B9%8B%E5%BF%833-Remind-%E9%BB%91%E6%9A%97%E4%BB%A3%E7%A0%81%E6%A8%A1%E5%BC%8F%E5%88%86%E6%95%B0%E8%AF%A6%E6%83%85/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<p>任意通关存档开启二周目后在开场选择属性、技能成长路线后会出现选择游戏模式场景，此处即可选择黑暗代码模式</p>
<p>另外在挑战完secret boss夜空之后会在当前存档开启快速通行模式，与黑暗代码可以共存使用，但同时使用二者选项无法解锁黑暗代码模式的分数记录，请注意这一点</p>
<hr>
<p>原贴地址就不发完整的，怕帖子被吞，搜Official Pro Code Merit Scoring可能会搜到，以下是粗略翻译：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">主线副boss: 5,000分/个（一般是每个世界的第一个boss）</span><br><span class="line">主线终boss: 10,000分/个（一般是每个世界的第二个boss，部分世界多boss合一计算）</span><br><span class="line">暗狱从者: 20,000分（挑战点14）</span><br><span class="line">数据里十三机关: 25,000分/个（DLC Limitcut）</span><br><span class="line">ReMind 赛亚诺特大师: 10,000分（DLC Remind主线最终boss）</span><br><span class="line">夜空: 30,000分（Secret Episode 最终隐藏boss）</span><br></pre></td></tr></table></figure>

<hr>
<p>拿到满级评价A Rank所需分数：370000，评分与所选难度无关，只与你开启的选项星数有关，计算如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">单个boss分数&#x3D;基础分÷40(满星)×星数</span><br></pre></td></tr></table></figure>

<p>比如关闭前三项一共取消12星，主线终boss单个分数=10000÷40×28=7000</p>
<hr>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">奥林帕斯：石魔5000、冰魔熔+岩魔龙+卷风魔10000</span><br><span class="line">黄昏镇：恶魔浪潮5000</span><br><span class="line">玩具箱：安洁莉可·安柏5000、玩具王10000</span><br><span class="line">科洛那王国：疯狂马车5000、狂乱之母10000</span><br><span class="line">怪兽城市：恐惧凝冻10000</span><br><span class="line">艾伦戴尔：棉花糖5000、斯库尔10000</span><br><span class="line">加勒比海：闪电钓手5000、深海阎王10000</span><br><span class="line">旧京山：黑暗方块5000、黑色杯面10000</span><br><span class="line">键刃墓地：黑暗浪潮10000、青年赛亚诺特+安塞姆+杰姆纳思10000</span><br><span class="line">斯卡拉·亚德·卡尔姆：装甲赛亚诺特10000、赛亚诺特大师10000</span><br><span class="line">Remind：赛亚诺特大师10000</span><br></pre></td></tr></table></figure>

<p>全程维持28星，本篇+DLC主线通关分数10.85万，暗狱从者1.4万，总计12.85万，所以十三机关是跑不掉的了，加上十三机关的22.75万，总计应该是35万，距离满评还差2万</p>
<p>怎么办呢？要不加星，要不把夜空也打了，打完夜空必定A Rank，前提是你得先顶过28星十三机关的蹂躏</p>
<hr>
<p>最后一次粗略计算：</p>
<p>1、靠主线拉分，需要全程BOSS战34星以上，溢出3250分</p>
<p>2、靠十三机关拉分，全BOSS维持31星以上，溢出4375分（也就是可以有2个boss关掉HP减退“偷懒”的程度）</p>
<p>至于要在哪些boss上偷懒，只能各位自己比划打算了</p>
<hr>
<p>最后我只能说：SE你tm就是狗13，37万分卡得这么极限，要么磨时间打主线拉分，要么死练技术打变态boss拉分，要么面对一个最变态的boss夜空</p>
<p>DLC奖杯没有白金杯，老子不稀罕这逼死普通玩家的DLC奖杯！</p>
]]></content>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>王国之心3 Remind 快速通行代码全成就简易攻略</title>
    <url>/2020/02/19/%E7%8E%8B%E5%9B%BD%E4%B9%8B%E5%BF%833-Remind-%E5%BF%AB%E9%80%9F%E9%80%9A%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%85%A8%E6%88%90%E5%B0%B1%E7%AE%80%E6%98%93%E6%94%BB%E7%95%A5/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<p>首先！快速通行代码的成就PS4奖杯没有难度要求，推荐使用简单难度完成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.空中挑战：在空中击倒13个敌人，途中不能落地（魔法、连结、合作技、游乐设施特技动作击倒的敌人无效）</span><br><span class="line"></span><br><span class="line">2.暴怒形态挑战：以暴怒形态一次打倒20个“阴影”和”新型阴影“</span><br><span class="line"></span><br><span class="line">3.连结挑战：以任一连结一次打倒77个敌人</span><br><span class="line"></span><br><span class="line">4.破冰挑战：在同一场战斗中冰冻30个敌人</span><br><span class="line"></span><br><span class="line">5.基伽巨兵挑战：以任一游乐设施特技动作一次达到5架基伽巨兵</span><br><span class="line"></span><br><span class="line">6.空中漫步挑战：不走地面，并在5次落地内从森林高塔抵达科洛那的城镇</span><br><span class="line"></span><br><span class="line">7.墨黑幽魂挑战：驾驶积木船打倒潜藏在云雾星河的攻击卫星“墨黑幽魂”并以A阶级通关</span><br><span class="line"></span><br><span class="line">8.保龄球挑战：以合作动作“尖叫全倒”一次打倒10个敌人</span><br><span class="line"></span><br><span class="line">9.只开启战斗代码“险中求生”通过2星的任一战斗传送门</span><br></pre></td></tr></table></figure>

<p>1、2、3、4理论上可以在键刃墓地“千人斩”战斗中完成，需要注意的是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.只要脚不落地都算在内，可以找敌人多而且能反复触发爬墙的场景完成，另外只能靠索拉本体平A击杀敌人。我个人认为比较早能完成的场景在奥林帕斯世界，有一处底下崩塌全是火，两侧都是爬墙的场景，前期留意把两个猪队友的伤害技能都关闭，不然会抢人头</span><br><span class="line"></span><br><span class="line">2.暴怒形态需要残血才会触发指令，建议带上“情绪崩堤”（残血时100%触发）</span><br><span class="line"></span><br><span class="line">3.连结挑战开启“持久连结”，时间延长至少一分钟，比较轻松能完成的场景：索拉拯救7位守护者心进入奥林帕斯世界时，路上全是阴影和新型阴影，另外就是千人斩部分</span><br><span class="line"></span><br><span class="line">4.破冰挑战的“冰冻”指的是暴雪魔法打中敌人出现冰冻效果，一发暴雪就打死敌人不计算在内，这个成就我个人最早能完成的场景是怪兽工厂倒数的某一次大场地战斗中，需要积攒欢笑能量，此处只要不触发尖叫全倒的RC指令，敌人就会无限刷新，注意前期不要等级刷得太高，魔法力太高会直接秒怪而不计算成就</span><br><span class="line"></span><br><span class="line">5.个人推荐场景在玩具商店3楼的儿童乐园处，此处刷出的机甲兵玩具不止5架，但要记住伤害要足</span><br><span class="line"></span><br><span class="line">6.建议在到达键刃墓地完成千人斩后拿到滑翔再做，途中触发爬墙是不计算5次落地内的，人物一旦落地千万别动左摇杆（个人惨痛经历），比较麻烦的只有一点：途中有一处大场景需要反复高跳到达高台（剧情中需要乐佩用头发荡2次那里）</span><br><span class="line"></span><br><span class="line">7.这个刷过积木船隐藏boss A评价的都知道怎么打，快速通行代码模式可以开局就拿到最强积木船金闪闪，然后就是一直刷boss的浮游护盾，一个护盾一万点分数，刷够100万分就是A评价</span><br><span class="line"></span><br><span class="line">8.怪兽公司限定，在两次需要积攒欢笑能量触发尖叫全倒的战斗中都可以比较轻松地完成，主要别让猪队友输出太高，怪物尽量集中，10只要求其实不怎么高</span><br><span class="line"></span><br><span class="line">9.通关后才会解锁显示的成就，险中求胜敌我3倍伤害，我个人完成的战斗传送门是No.2 奥林帕斯-天界-天顶，里面只有2只小Boss怪，64攻67魔面板，3倍伤害下利用连结的超高比例减伤，可以轻松磨死</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>还原Hexo Blog以及Next主题配置</title>
    <url>/2021/04/18/%E8%BF%98%E5%8E%9FHexo-Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h6 id="安装hexo-asset-image模块"><a href="#安装hexo-asset-image模块" class="headerlink" title="安装hexo asset image模块"></a>安装hexo asset image模块</h6><p><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></p>
<h6 id="安装hexo-git部署模块"><a href="#安装hexo-git部署模块" class="headerlink" title="安装hexo git部署模块"></a>安装hexo git部署模块</h6><p><code>npm install hexo-deployer-git --save</code></p>
<h6 id="安装hexo搜索模块"><a href="#安装hexo搜索模块" class="headerlink" title="安装hexo搜索模块"></a>安装hexo搜索模块</h6><p><code>npm install hexo-generator-searchdb</code></p>
<h6 id="安装abbrlink模块"><a href="#安装abbrlink模块" class="headerlink" title="安装abbrlink模块"></a>安装abbrlink模块</h6><p>`npm install hexo-abbrlink –save``</p>
<h6 id="安装sitemap模块"><a href="#安装sitemap模块" class="headerlink" title="安装sitemap模块"></a>安装sitemap模块</h6><p><code>npm install hexo-generator-sitemap --save</code></p>
<h6 id="安装Next主题"><a href="#安装Next主题" class="headerlink" title="安装Next主题"></a>安装Next主题</h6><p><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code></p>
<h6 id="Pace元素模块"><a href="#Pace元素模块" class="headerlink" title="Pace元素模块"></a>Pace元素模块</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd themes&#x2F;next</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-pace source&#x2F;lib&#x2F;pace</span><br></pre></td></tr></table></figure>

<h6 id="Canvas-nest元素模块"><a href="#Canvas-nest元素模块" class="headerlink" title="Canvas-nest元素模块"></a>Canvas-nest元素模块</h6><p><code>touch source/_data/footer.swig</code></p>
<p>添加文本内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script color&#x3D;&quot;0,0,255&quot; opacity&#x3D;&quot;0.5&quot; zIndex&#x3D;&quot;-1&quot; count&#x3D;&quot;99&quot; src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;canvas-nest.js@1&#x2F;dist&#x2F;canvas-nest.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>编辑Next主题_config文件,将footer注释符去掉</p>
<p><code>#footer: source/_data/footer.swig -&gt; footer: source/_data/footer.swig</code></p>
]]></content>
      <tags>
        <tag>备忘</tag>
      </tags>
  </entry>
  <entry>
    <title>记一篇家庭NAS主机折腾随记</title>
    <url>/2021/04/20/%E8%AE%B0%E4%B8%80%E7%AF%87%E5%AE%B6%E5%BA%ADNAS%E4%B8%BB%E6%9C%BA%E6%8A%98%E8%85%BE%E9%9A%8F%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<p>时隔5个月多，2020年11月换了一个城市打工，每天忙于新工作环境的适应和工作内容的掌握熟悉，再加上我个人没有写日记的习惯，导致博客的基本没有什么有效内容产出，就连这一篇随记也是空闲了下来才想着摸着鱼，一边写一边回忆这一周以来折腾家里原来跑着Windows Server 2019的NAS主机。</p>
<h4 id="正篇"><a href="#正篇" class="headerlink" title="正篇"></a>正篇</h4><p>Unraid系统除了拥有一般NAS系统的功能，还能运行Docker、虚拟机，直通硬件也十分方便，并且社区扩展活跃丰富，能添加各式各样嵌入到系统界面的插件，非常适合做全功能一体机的底层系统。</p>
<p>目前家里的主机的所有Docker容器和虚拟机都正常在Unraid内运行，已经稳定运行一个月。</p>
<h5 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h5><p>网上有很多教程，甚至还有很多盗版教程，系统安装这一部分没有什么需要填坑的地方，需要注意的是如果想入正版Key，一般只能通过正常安装试用Trial key，然后在系统Tools - Registration里点击购买，官网没有相关的购买链接。</p>
<h5 id="NAS"><a href="#NAS" class="headerlink" title="NAS"></a>NAS</h5><p>Unraid的NAS部分十分简洁，整个系统按照授权版本限制可加入序列的存储硬盘数量，包括校验盘Parity Drive和缓存盘Cache Drive，但不包括用于启动的U盘。</p>
<h6 id="Shares-共享文件夹"><a href="#Shares-共享文件夹" class="headerlink" title="Shares/共享文件夹"></a>Shares/共享文件夹</h6><img src="/2021/04/20/%E8%AE%B0%E4%B8%80%E7%AF%87%E5%AE%B6%E5%BA%ADNAS%E4%B8%BB%E6%9C%BA%E6%8A%98%E8%85%BE%E9%9A%8F%E8%AE%B0/Shares.png" alt="Shares" style="zoom:50%;">

<p>在系统安装完毕后，在MAIN页面可以看到所有被系统识别出来的存储设备，包括启动引导用的USB设备。硬盘序列Array加入硬盘后，需要在下方执行Format格式化才能供Unraid使用。在Array启动之后，Shares页面默认创建几个文件夹，对应的是不同分类文件的存储，并且默认启用SMB方式共享。</p>
<img src="/2021/04/20/%E8%AE%B0%E4%B8%80%E7%AF%87%E5%AE%B6%E5%BA%ADNAS%E4%B8%BB%E6%9C%BA%E6%8A%98%E8%85%BE%E9%9A%8F%E8%AE%B0/Shares说明.png" alt="Shares说明" style="zoom:33%;">

<p>appdata：主要存放Docker容器的文件，包括从容器内挂载volume出来的数据</p>
<p>domains：存放一些虚拟机会用到的镜像、虚拟磁盘文件，比如x86软路由的虚拟磁盘img、黑群晖的启动引导文件</p>
<p>isos：系统镜像、安装引导文件等等都存放在这里</p>
<p>system：Docker功能虚拟磁盘的默认存储路径，虚拟机主要虚拟磁盘的存放地方</p>
<p><img src="/2021/04/20/%E8%AE%B0%E4%B8%80%E7%AF%87%E5%AE%B6%E5%BA%ADNAS%E4%B8%BB%E6%9C%BA%E6%8A%98%E8%85%BE%E9%9A%8F%E8%AE%B0/Shares%E6%96%87%E4%BB%B6%E5%A4%B9%E8%AE%BE%E7%BD%AE.png" alt="image-20210420202928417"></p>
<p>点击文件夹名字后会进入该文件夹具体的设置页面，需要注意的地方：</p>
<p>Allocation method：</p>
<img src="/2021/04/20/%E8%AE%B0%E4%B8%80%E7%AF%87%E5%AE%B6%E5%BA%ADNAS%E4%B8%BB%E6%9C%BA%E6%8A%98%E8%85%BE%E9%9A%8F%E8%AE%B0/Shares文件夹Allocation Method.png" alt="Shares文件夹Allocation Method" style="zoom:50%;">

<p>①High-water：以1T+2T+3T举例，当新文件写入的时候，系统会检测一次所有在array里的硬盘剩余容量，以最大容量硬盘的50%容量为基准 (3T÷2=1.5T)，随机写入到剩余容量&gt;1.5T的硬盘内（也就是2T和3T的硬盘），等到两个硬盘剩余容量都只剩1.5T，则进行第二次检测，基准变为0.75T，以此类推，系统会优先把文件写入剩余容量最大的硬盘内。<br>②Fill-up：系统以array中硬盘的顺序依次写入新文件，一般要搭配最小剩余容量使用，不然会引发因空间不足导致的Docker和虚拟机报错运行的问题<br>③Most-free：系统选取剩余容量最大的硬盘写入，需要注意的是每写入一个文件都会检测一遍各个硬盘的剩余容量，大量小文件写入时可能会大幅度影响array的I/O性能</p>
<p>Minimum free space：该文件夹的最小剩余容量</p>
<p>Split Level：分散目录的层级，默认为自动分散。简单来说就是根据设定的层级锁定文件夹分散到哪个硬盘里，Level 1是在Shares页面创建的文件夹Media，设置Top Level 1意味着Media文件夹可以分散存储到各个硬盘内但后续所有层级的文件夹则固定存储在对应的硬盘内；Top Level 2意味着Media/xxx这两层文件夹都会分散存储到各个硬盘内但后续第三层Media/xxx/xxx以后的所有层级文件夹都被固定存储在相应的硬盘内</p>
<img src="/2021/04/20/%E8%AE%B0%E4%B8%80%E7%AF%87%E5%AE%B6%E5%BA%ADNAS%E4%B8%BB%E6%9C%BA%E6%8A%98%E8%85%BE%E9%9A%8F%E8%AE%B0/Shares文件夹Include disks.png" style="zoom:50%;">

<p>Included disks：该文件夹存储包含的物理硬盘，默认为ALL，即新文件写入会随机存储到其中一个硬盘内</p>
<p>Excluded disks：该文件夹存储排除的物理硬盘，默认为None，即不排除新文件写入某一个或几个硬盘内</p>
<img src="/2021/04/20/%E8%AE%B0%E4%B8%80%E7%AF%87%E5%AE%B6%E5%BA%ADNAS%E4%B8%BB%E6%9C%BA%E6%8A%98%E8%85%BE%E9%9A%8F%E8%AE%B0/Shares文件夹设置Use Cache.png" alt="image-20210420203153112" style="zoom:50%;">

<p>Use Cache：系统默认有一个每天03:40启动的程序Mover，用来针对这个设置的<br>①No：不使用缓存盘，即新文件写入到该文件夹时直接写入Array的硬盘内</p>
<p>②Yes：使用缓存盘，即新文件写入到该文件夹时直接写入到缓存盘内，但Mover运行会将文件从缓存盘中转移到Array中</p>
<p>③Only：只使用缓存盘，即新文件一直留存在缓存盘内，即使Mover运行也不会转移数据</p>
<p>④Prefer：该文件夹倾向于使用缓存盘，直到缓存盘剩余容量低于该文件夹设置的最小剩余容量，比如缓存盘120G容量，设置60G最小剩余容量，那么当缓存盘剩余60G的时候，企图写入该文件夹的新文件就会转为直接写入Array中，一般只有存放临时或不重要的文件夹才会设置为这个策略。但个人不推荐使用这种方式，容易导致让启用缓存盘共享文件夹的相关软件因空间不足而报错</p>
<img src="/2021/04/20/%E8%AE%B0%E4%B8%80%E7%AF%87%E5%AE%B6%E5%BA%ADNAS%E4%B8%BB%E6%9C%BA%E6%8A%98%E8%85%BE%E9%9A%8F%E8%AE%B0/Shares文件夹设置Export.png" style="zoom:50%;">

<p>Export：No、Yes、Yes（hidden）对应不共享、共享、共享但隐藏显示</p>
<img src="/2021/04/20/%E8%AE%B0%E4%B8%80%E7%AF%87%E5%AE%B6%E5%BA%ADNAS%E4%B8%BB%E6%9C%BA%E6%8A%98%E8%85%BE%E9%9A%8F%E8%AE%B0/Shares文件夹设置Security.png" style="zoom:50%;">

<p>Security：<br>①Public：所有人都可以读写</p>
<p>②Secure：访客只能读取不能写入，可以在下方单独设置每个用户的读写权限</p>
<p>③Private：访客不能读写，可以在下方单独设置每个用户的读写权限</p>
<img src="/2021/04/20/%E8%AE%B0%E4%B8%80%E7%AF%87%E5%AE%B6%E5%BA%ADNAS%E4%B8%BB%E6%9C%BA%E6%8A%98%E8%85%BE%E9%9A%8F%E8%AE%B0/Shares文件夹设置SMB User Access.png" style="zoom:50%;">

<h5 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h5><img src="/2021/04/20/%E8%AE%B0%E4%B8%80%E7%AF%87%E5%AE%B6%E5%BA%ADNAS%E4%B8%BB%E6%9C%BA%E6%8A%98%E8%85%BE%E9%9A%8F%E8%AE%B0/Docker.png" style="zoom:50%;">

<p>First of all，Unraid的Docker是可以基本还原大部分容器运行状态的，最起码我个人使用的服务中都能通过详细配置正常使用</p>
<p>首先当然是给Docker更换源加速下载部署，通过网页界面webui右上角的Terminal或者直接SSH登录进Unraid，新建或修改/etc/docker/daemon.json添加镜像源地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;etc&#x2F;docker </span><br><span class="line">tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39; </span><br><span class="line">&#123; </span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;] </span><br><span class="line">&#125; </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<img src="/2021/04/20/%E8%AE%B0%E4%B8%80%E7%AF%87%E5%AE%B6%E5%BA%ADNAS%E4%B8%BB%E6%9C%BA%E6%8A%98%E8%85%BE%E9%9A%8F%E8%AE%B0/Unraid-Docker-Add Container.png" style="zoom: 33%;">

<p>在社区应用内有大量的docker模板提供下载，需要事先下载安装社区应用插件，即Community Applications，整个应用市场都托管在Github上，需要想点办法出国，不然会访问困难</p>
<p>Template：模板，在社区应用APPS页面可以直接下载并加载到该页面并配置好所有东西，手动添加容器，在APPLY运行后系统也会默认将手工配置保存为用户模板，方便下次直接调用修改</p>
<p>Repository：镜像仓库路径可以直接使用docker hub的注册镜像库路径，比如docker pull nginx拉取官方nginx镜像，则在这一行直接填入nginx就可以执行同样的命令</p>
<p>Network Type：网络类型，Docker在启动后默认创建3个驱动分别为bridge、host、null的网络连接，容器默认使用Bridge桥接Unraid的bond0接口</p>
<img src="/2021/04/20/%E8%AE%B0%E4%B8%80%E7%AF%87%E5%AE%B6%E5%BA%ADNAS%E4%B8%BB%E6%9C%BA%E6%8A%98%E8%85%BE%E9%9A%8F%E8%AE%B0/Docker容器配置.png" alt="Docker容器配置" style="zoom:50%;">

<p>最后一项是核心，可以添加Path、Port、Variable、Label、Device参数，分别对应docker run中的-v、-p、-e、–label、–device，这5个选项就可以基本还原容器运行环境</p>
<p>踩过的坑：</p>
<ol>
<li>每一次更改APPLY都是docker stop、docker rm、docker run，在运行比较大的容器时，要注意不能关闭页面，最好通过Terminal手工执行操作，不然通过网页操作不小心误关页面可能会导致容器启动异常</li>
<li>某些游戏服务端的Docker镜像在启动时会无法识别Unraid自身的文件映射路径，比如我运行的求生之路2服务端，如果将服务端所在的路径/serverdata/serverfiles挂载到/mnt/user/appdata/l4d2server，如果实际文件被分散写入到disk1和disk2，那么在第二次重启运行的时候，容器就无法识别到所有在/mnt/user/appdata/l4d2server的文件。解决方法是指定挂载到物理硬盘路径内，比如/mnt/disk2/l4d2server</li>
<li>默认的bridge网络可能不能实现容器间互通，需要创建自定义的网络才可以</li>
<li>默认不支持Docker compose，目前官方也没放出消息要集成docker compose功能，涉及到多容器间协作的服务需要手工一个一个添加配置运行</li>
<li>DOCKER页面的容器可以长按拖动调整顺序，这个顺序也是启用autostart的容器启动顺序</li>
<li>要十分！十分！十分！十分！注意容器运行用户是哪一个，默认运行nobody:users，根据容器umask设置不同，有可能从容器内部挂载出去的文件夹通过smb访问没有权限修改写入甚至读取，如果不熟悉chown和chmod的可以直接在tools - new permissions里选择容器对应的挂载路径把权限全部重置一遍</li>
</ol>
<h5 id="VM虚拟机"><a href="#VM虚拟机" class="headerlink" title="VM虚拟机"></a>VM虚拟机</h5><img src="/2021/04/20/%E8%AE%B0%E4%B8%80%E7%AF%87%E5%AE%B6%E5%BA%ADNAS%E4%B8%BB%E6%9C%BA%E6%8A%98%E8%85%BE%E9%9A%8F%E8%AE%B0/VMS.png" alt="image-20210420202426004" style="zoom:50%;">

<p>这一块涉及不深，我只有基本的虚拟软路由翻墙和黑群晖同步照片2个虚拟机的需求，手里多了一台Intel Nuc 8放客厅作为父母的Windows娱乐影视机，所以也就没必要再折腾显卡直通，以后有机会升级到6.9还会尝试的（因为6.9对直通硬件进行了一系列优化和简便化操作）</p>
<p>踩过的坑</p>
<ol>
<li>Unraid界面提供的配置选项还不够实用，虚拟网卡默认驱动都是virtio，想要上千兆或万兆网的朋友要手动切换高级视图编辑xml更改为e1000才行</li>
<li>为了稳定兼容运行，引导方式最好选用SeaBIOS（即Legacy模式）</li>
<li>虚拟机是可以直通硬盘的，前提是硬盘未加入Array，通过/dev/disks/by-id/硬盘ID挂载，不会影响原来就在Array里的硬盘数据，相当于同时把硬盘物理连接到unraid和虚拟机</li>
</ol>
<h5 id="APPS插件篇"><a href="#APPS插件篇" class="headerlink" title="APPS插件篇"></a>APPS插件篇</h5><p>这一块实用插件太多了，我只列举我自己用到的</p>
<img src="/2021/04/20/%E8%AE%B0%E4%B8%80%E7%AF%87%E5%AE%B6%E5%BA%ADNAS%E4%B8%BB%E6%9C%BA%E6%8A%98%E8%85%BE%E9%9A%8F%E8%AE%B0/APPS.png" style="zoom:50%;">

<p>Community Applications：最核心的插件，社区应用其本身，没了它也就没有其他的事了，安装后直接在主界面显示APPS标签页</p>
<img src="/2021/04/20/%E8%AE%B0%E4%B8%80%E7%AF%87%E5%AE%B6%E5%BA%ADNAS%E4%B8%BB%E6%9C%BA%E6%8A%98%E8%85%BE%E9%9A%8F%E8%AE%B0/Unassigned Devices.png" style="zoom:50%;">

<p>Unassigned Devices：硬盘挂载的核心，可以挂载NTFS文件系统的硬盘，安装后默认选项在Main - Unassigned Devices，找到对应的硬盘选择Mount，点击硬盘ID左边的+号展开，对应分区点进去打开Share并等待一会，就能在Unraid的SMB共享里看到对应文件夹</p>
<img src="/2021/04/20/%E8%AE%B0%E4%B8%80%E7%AF%87%E5%AE%B6%E5%BA%ADNAS%E4%B8%BB%E6%9C%BA%E6%8A%98%E8%85%BE%E9%9A%8F%E8%AE%B0/SETTINGS插件.png" style="zoom:50%;">

<p>User Scripts：比较关键的APP，相当于在unraid主机上的crontab，安装后默认选项在SETTINGS - User ultilities - User Scripts</p>
<p>Fix Common Problems：检测Unraid运行的常见问题，主要是能看到登录尝试次数，查看是否有人爆破服务器，SETTINGS - User ultilities - Fix Common Problems</p>
<p>Dynamix Wireguard：基于WireGuard的VPN服务端，安装后可以配置私人VPN，配合tunsafe之类的客户端可以接入Unraid所在的内网访问资源，十分方便，SETTINGS - Network services - VPN Manager</p>
<p>Dynamix Cache Directories：缓存目录访问记录到内存里，注意不是缓存读取的文件到内存里，这个插件仅加速文件目录路径的访问，安装后选项默认在SETTINGS - User ultilities - Folder Caching</p>
<p>Dynamix SSD TRIM：使用缓存盘必备的插件，能定时为SSD执行TRIM，安装后选项默认在SETTINGS - Scheduler</p>
<h4 id="前篇"><a href="#前篇" class="headerlink" title="前篇"></a>前篇</h4><h5 id="一切的开端"><a href="#一切的开端" class="headerlink" title="一切的开端"></a>一切的开端</h5><p>2019年10月，我和家人收藏影音资源和存档的照片越来越多，家里人对数据存储已经产生了比较迫切的需求，恰逢工作交接期，周末比较空闲，就想着要买一台NAS主机。起初打算考虑品牌机，比如群晖Synology、威联通QNAP，这几家品牌机基本都属于明面上卖产品，实际上卖系统软件服务的厂商，所以主机硬件性能普遍弱，而我们又想着既然都要花钱买NAS，干脆自己组一台AIO主机，于是就着手购买相关硬件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主板：英业达B400G3_10G（带6个+4个SATA3口，2个SATA控制器，2个PCI-E x16槽位，自带超低规格的显示核心，4物理网口的4张板载千兆网卡）</span><br><span class="line">CPU：Intel E3 1230 v3</span><br><span class="line">内存：二手服务器拆机ECC内存8GB x4</span><br><span class="line">显卡：GTX750Ti （不需要额外供电）</span><br></pre></td></tr></table></figure>

<h5 id="底层系统的选择"><a href="#底层系统的选择" class="headerlink" title="底层系统的选择"></a>底层系统的选择</h5><p>因为家里人需要Windows系统，所以AIO主机在底层系统可供的选择很少，常见的是ESXi和PVE，但都有不可回避的问题存在。</p>
<p>ESXi：商业系统成熟稳定，硬件直通操作方便，但是不知是什么原因，主机配的Nvidia GTX750亮机卡始终不能直通到Win7虚拟机内使用，这也就没办法利用显卡流畅播放各种视频</p>
<p>PVE：基于Debian的Linux系统，可视化操作太少，基本依赖命令，一旦需要调试，家里人根本不会操作</p>
<p>最后选择了可以驱动N卡又能组建硬盘存储池的Windows Server，毕竟硬盘都是从现成的电脑主机上拆下来，3T+2T如果分开存储，在文件管理和容量上都会很不方便</p>
<h5 id="Windows-Server实现All-in-One的局限"><a href="#Windows-Server实现All-in-One的局限" class="headerlink" title="Windows Server实现All in One的局限"></a>Windows Server实现All in One的局限</h5><p>在满足各种需求的过程中，我逐渐感受到Windows系统在自建功能服务的局限性，林林总总的服务端都提供不了持续稳定的windows版更新支持，而且Windows的Docker在使用上经常会出现我无法调试的文件系统错误，主要体现在容器运行时内外部文件读写执行上。</p>
<p>Docker for windows切换为Linux内核后，通过创建一个基于Linux系统的Hyper-V虚拟机实现Docker服务运行。Docker需要访问Windows宿主机文件系统时提示需要开启共享盘，所以个人猜测Docker是基于smb方式与宿主机实现文件系统互通的，于是就出现了一系列解决不了的问题。</p>
<p>Windows的Mysql被容器使用的时候会出现莫名其妙的连接错误，包括网络连接超时失败、文件读写权限错误等等，最后是改成使用Mariadb容器将数据库环境运行在Docker内部才正常运作使用，同样的情况也出现在Windows的Nginx上</p>
<p>Windows还有一个非常影响体验的问题，那就是十分让人迷惑的本地文件系统权限以及网络共享SMB权限机制，可能给Server启用AD域管理会简便明了一点，可是我没有仔细研究，因为马上就要回到正篇考虑更换底层操作系统了。</p>
]]></content>
      <tags>
        <tag>技术</tag>
        <tag>随记</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建Seafile (WinServer 2019+Docker for Windows)</title>
    <url>/2020/03/07/%E6%90%AD%E5%BB%BASeafile-WinServer-2019-Docker-for-Windows/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<p>更新1：建议数据库不要使用windows版，内建到Docker内作为独立容器运行</p>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">物理主机系统： Windows server 2019 Datecenter (v1809, 17763.805)</span><br><span class="line">Docker： Docker for windows 2.2.0.3 (Engine: 19.03.5, Compose: 1.25.4)</span><br><span class="line">Mariadb： Docker (mariadb:latest)</span><br><span class="line">Nginx： Docker (nginx:latest)</span><br><span class="line">Seafile： Pro专业版(docker.seafile.top&#x2F;seafileltd&#x2F;seafile-pro-mc:latest)</span><br><span class="line">#可选</span><br><span class="line">Onlyoffice-documentserver: Docker镜像(onlyoffice&#x2F;documentserver:latest)</span><br></pre></td></tr></table></figure>

<h5 id="Docker-for-windows"><a href="#Docker-for-windows" class="headerlink" title="Docker for windows"></a>Docker for windows</h5><p>安装是全自动创建Docker Host的Hyper-V虚拟机</p>
<h5 id="Mariadb-Docker"><a href="#Mariadb-Docker" class="headerlink" title="Mariadb Docker"></a>Mariadb Docker</h5><p>此处采用compose 3.0+让容器间通过同一个虚拟子网实现互通</p>
<p><code>docker network create shared</code></p>
<h6 id="Mariadb-Compose-db-yml"><a href="#Mariadb-Compose-db-yml" class="headerlink" title="Mariadb Compose (db.yml)"></a>Mariadb Compose (db.yml)</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  mariadb:</span><br><span class="line">    image: mariadb:latest</span><br><span class="line">    container_name: mariadb</span><br><span class="line">    command: --character-set-server&#x3D;utf8mb4 --collation-server&#x3D;utf8mb4_unicode_ci --innodb-flush-method&#x3D;fsync			#设置服务器字符集, 服务器连接排序规则, 以及innodb引擎flush方式</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD&#x3D;password  # 必须, 设置root账号的密码</span><br><span class="line">      - MYSQL_LOG_CONSOLE&#x3D;true</span><br><span class="line">    volumes:</span><br><span class="line">      - &#x2F;C&#x2F;Docker&#x2F;mariadb:&#x2F;var&#x2F;lib&#x2F;mysql  # 必须, 持久化存储数据文件</span><br><span class="line">      - &#x2F;C&#x2F;Docker&#x2F;mariadb-conf&#x2F;my.cnf:&#x2F;etc&#x2F;my.cnf #外挂my.cnf方便配置Mariadb</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    networks:</span><br><span class="line">      - default</span><br><span class="line"># 一并部署phpmyadmin方便通过Web操作</span><br><span class="line">  phpmyadmin:</span><br><span class="line">    image: phpmyadmin&#x2F;phpmyadmin:4.9.4</span><br><span class="line">    container_name: phpmyadmin</span><br><span class="line">    environment:</span><br><span class="line">      - PMA_ARBITRARY&#x3D;1      # 允许pma访问不同数据库</span><br><span class="line">      - PMA_HOST&#x3D;mariadb	# 默认连接的数据库, 在同一子网内直接用service name代替</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    expose:</span><br><span class="line">      - &#39;80&#39;</span><br><span class="line">    networks:</span><br><span class="line">      - default</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  default:</span><br><span class="line">    external:</span><br><span class="line">      name: shared				#关键, 两个容器使用shared网络</span><br></pre></td></tr></table></figure>

<p>保存, 加 -d 参数后台运行</p>
<p><code>docker-compose -f .\db.yml up -d</code></p>
<h4 id="主体搭建部署"><a href="#主体搭建部署" class="headerlink" title="主体搭建部署"></a>主体搭建部署</h4><p><a href="https://cloud.seafile.com/published/seafile-manual-cn/docker/pro-edition/%E7%94%A8Docker%E9%83%A8%E7%BD%B2Seafile.md">官方文档</a></p>
<p>使用Docker Compose可以一键搭建，具体参数自己酌情修改</p>
<p>注意：经过我个人一个月的使用, elasticsearch数据如果外挂到windows系统，可能会因为文件系统权限或其他我未知的原因不停产生error，导致log不断蚕食硬盘空间，建议内置</p>
<h6 id="Seafile-Compose-seafile-yml"><a href="#Seafile-Compose-seafile-yml" class="headerlink" title="Seafile Compose (seafile.yml)"></a>Seafile Compose (seafile.yml)</h6><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">memcached:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">memcached:1.5.6</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">seafile-memcached</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">memcached</span> <span class="string">-m</span> <span class="number">256</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">default</span>										<span class="comment">#定义默认网络</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">seafileltd/elasticsearch-with-ik:5.6.16</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">seafile-elasticsearch</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.type=single-node</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms1g -Xmx1g&quot;</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">2048M</span>								<span class="comment">#限制最大内存</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch-data:/usr/share/elasticsearch/data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">default</span>										<span class="comment">#定义默认网络</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">seafile:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.seafile.top/seafileltd/seafile-pro-mc:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">seafile</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10002</span><span class="string">:443</span>								<span class="comment">#转发10002端口到seafile的443端口</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">D:/Docker/seafile/data:/shared</span>     			<span class="comment">#外挂Seafile主要的配置和数据文件</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_HOST=mariadb</span>								<span class="comment">#数据库IP, 若容器互通自行修改对应名</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_ROOT_PASSWD=rootpassword</span>					<span class="comment">#数据库root密码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TIME_ZONE=Asia/Shanghai</span>						<span class="comment">#时区, 默认不用修改</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SEAFILE_ADMIN_EMAIL=example@gmail.com</span>		<span class="comment">#初始化seafile管理员账号</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SEAFILE_ADMIN_PASSWORD=password</span>				<span class="comment">#初始化seafile管理员账号密码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SEAFILE_SERVER_LETSENCRYPT=false</span>			<span class="comment">#是否启用内建letsencrypt(自动申请、更新、部署证书)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SEAFILE_SERVER_HOSTNAME=domain.com</span>			<span class="comment">#seafile服务器域名(会影响后续配置文件生成)</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">memcached</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">default</span>										<span class="comment">#定义默认网络</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">external:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">shared</span>								<span class="comment">#默认网络接入shared网络</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">elasticsearch-data:</span>							<span class="comment">#将elasticsearch的数据内置并持久化</span></span><br></pre></td></tr></table></figure>

<p>保存, 加 -d 参数后台运行</p>
<p><code>docker-compose -f .\seafile.yml up -d</code></p>
<p>出现如下信息，就可以通过 <a href="http://domain.com:10002/">http://domain.com:10002</a> 访问seafile的网页界面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Starting seahub at port 8000 ...</span><br><span class="line">Seahub is started</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure>

<h5 id="启用HTTPS访问"><a href="#启用HTTPS访问" class="headerlink" title="启用HTTPS访问"></a>启用HTTPS访问</h5><p>Seafile的镜像默认会生成持久化的nginx配置文件 (在/shared/nginx/seafile.nginx.conf)</p>
<ol>
<li>修改监听80端口的server模块中url rewrite部分以及proxy_set_header部分</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">        rewrite ^ https:&#x2F;&#x2F;domain.com:10002$request_uri? permanent;</span><br><span class="line">    &#125;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">proxy_set_header Host $host:10002;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>根据443端口监听部分放置ssl证书和私钥文件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssl_certificate      &#x2F;shared&#x2F;ssl&#x2F;fullchain.cer;</span><br><span class="line">ssl_certificate_key  &#x2F;shared&#x2F;ssl&#x2F;private.key;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>访问<a href="https://domain.com:10002/">https://domain.com:10002</a>，以管理员账号登录，点击右上角头像进入“系统管理”，输入密码后左侧点击“设置”</li>
</ol>
<p>修改以下部分 (如果修改错误的话，会无法正常使用网页界面和下载/上传文件)</p>
<img src="/2020/03/07/%E6%90%AD%E5%BB%BASeafile-WinServer-2019-Docker-for-Windows/Seafile-系统设置.png" alt="Seafile-系统设置" style="zoom: 80%;">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SERVICE_URL				https:&#x2F;&#x2F;domain.com:10002</span><br><span class="line">FILE_SERVER_ROOT		https:&#x2F;&#x2F;domain.com:10002&#x2F;seafhttp</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>修改/shared/seafile/conf/seahub_settings.py，添加以下内容</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE_X_FORWARDED_HOST &#x3D; True</span><br><span class="line">SECURE_PROXY_SSL_HEADER &#x3D; (&#39;HTTP_X_FORWARDED_PROTO&#39;, &#39;https&#39;)</span><br></pre></td></tr></table></figure>

<p>至此，Seafile基本上就可以正常通过HTTPS访问使用</p>
<h4 id="可选配置修改"><a href="#可选配置修改" class="headerlink" title="可选配置修改"></a>可选配置修改</h4><p><a href="https://docs.seafile.com/published/seafile-manual-cn/config/README.md">官方文档</a></p>
<h5 id="启用webdav"><a href="#启用webdav" class="headerlink" title="启用webdav"></a>启用webdav</h5><p>修改/shared/seafile/conf/seafdav.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[WEBDAV]</span><br><span class="line">enabled &#x3D; true</span><br><span class="line">port &#x3D; 8080</span><br><span class="line">fastcgi &#x3D; true</span><br><span class="line">share_name &#x3D; &#x2F;seafdav</span><br></pre></td></tr></table></figure>

<h5 id="配置seafile-conf"><a href="#配置seafile-conf" class="headerlink" title="配置seafile.conf"></a>配置seafile.conf</h5><p>可添加以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[fileserver]</span><br><span class="line">## Seafile tcp 端口 (不要修改该设置)</span><br><span class="line">port &#x3D; 8082</span><br><span class="line"></span><br><span class="line">#设置用于服务 http 请求的线程数,默认值是10个线程</span><br><span class="line">worker_threads &#x3D; 30</span><br><span class="line"></span><br><span class="line"># 取消上传文件大小限制, 默认最大为200M.</span><br><span class="line">max_upload_size&#x3D;0</span><br><span class="line"></span><br><span class="line"># 取消下载文件大小限制, 默认最大为200M.</span><br><span class="line">max_download_dir_size&#x3D;0</span><br><span class="line"></span><br><span class="line">#定义索引中并发线程的数量</span><br><span class="line">#max_indexing_threads &#x3D; 2</span><br><span class="line"></span><br><span class="line">#Web界面上传文件时块大小(MB)</span><br><span class="line">#fixed_block_size&#x3D;2</span><br><span class="line"></span><br><span class="line">#当用户上传文件时,文件服务器分配一个令牌来授权上传操作.该令牌默认有效期1小时,通过WAN上传大型文件时,上传时间可能会超过1小时,您可以将令牌到期时间更改为更大的值.</span><br><span class="line">web_token_expire_time&#x3D;3600</span><br><span class="line"></span><br><span class="line">#从Web界面下载文件夹为zip存档时windows可能不支持UTF-8</span><br><span class="line">windows_encoding &#x3D; iso-8859-1</span><br><span class="line"></span><br><span class="line">[database]</span><br><span class="line">#连接池大小,默认100</span><br><span class="line">max_connections &#x3D; 200</span><br><span class="line"></span><br><span class="line">[library_trash]</span><br><span class="line">#资料库回收站清理周期</span><br><span class="line">expire_days &#x3D; 30</span><br><span class="line"></span><br><span class="line">[history]</span><br><span class="line">#对所有的资料库设置一个默认的文件历史保留天数</span><br><span class="line">keep_days &#x3D; 7</span><br></pre></td></tr></table></figure>

<h5 id="配置seahub-settings-py"><a href="#配置seahub-settings-py" class="headerlink" title="配置seahub_settings.py"></a>配置seahub_settings.py</h5><p><a href="https://manual-cn-origin.seafile.com/config/seahub_settings_py">官方文档</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#启用断点续传</span><br><span class="line">#限制：</span><br><span class="line">#只支持重新上传；文件更新和文件夹上传无法断点续传</span><br><span class="line">#只支持 Chrome, Firefox, IE 10+</span><br><span class="line">ENABLE_RESUMABLE_FILEUPLOAD &#x3D; True</span><br><span class="line"></span><br><span class="line"># 开启邮件提醒服务 (用户重置密码, 管理员增加新用户, 管理员重置用户密码, 用户发送分享外链和上传外链)</span><br><span class="line"># 启用587端口 TLS连接</span><br><span class="line">#EMAIL_USE_TLS &#x3D; True</span><br><span class="line"># 启用465端口 SSL连接</span><br><span class="line">#EMAIL_USE_SSL &#x3D; True</span><br><span class="line">EMAIL_USE_TLS &#x3D; False</span><br><span class="line">EMAIL_HOST &#x3D; &#39;smtp.domain.com&#39;			# smpt 服务器</span><br><span class="line">EMAIL_HOST_USER &#x3D; &#39;username@domain.com&#39;    # 用户名和域名</span><br><span class="line">EMAIL_HOST_PASSWORD &#x3D; &#39;password&#39;			# 密码</span><br><span class="line">EMAIL_PORT &#x3D; &#39;25&#39;						# 端口</span><br><span class="line">DEFAULT_FROM_EMAIL &#x3D; EMAIL_HOST_USER</span><br><span class="line">SERVER_EMAIL &#x3D; EMAIL_HOST_USER</span><br></pre></td></tr></table></figure>



<h4 id="可选部分"><a href="#可选部分" class="headerlink" title="可选部分"></a>可选部分</h4><h5 id="集成Onlyoffice-documentserver"><a href="#集成Onlyoffice-documentserver" class="headerlink" title="集成Onlyoffice-documentserver"></a>集成Onlyoffice-documentserver</h5><h6 id="部署Onlyoffice-documentserver"><a href="#部署Onlyoffice-documentserver" class="headerlink" title="部署Onlyoffice documentserver"></a>部署Onlyoffice documentserver</h6><p><a href="https://manual-cn-origin.seafile.com/deploy_pro/office-wen-jian-yu-lan-he-bian-ji/only_office">官方文档</a></p>
<p>(推荐) 或者将Onlyoffice-documentserver集成到同一个Compose文件中</p>
<p>Compose File (seafile-onlyoffice.yml)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  memcached:</span><br><span class="line">    image: memcached:1.5.6</span><br><span class="line">    container_name: seafile-memcached</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    entrypoint: memcached -m 256</span><br><span class="line">    networks:</span><br><span class="line">      - default</span><br><span class="line"></span><br><span class="line">  elasticsearch:</span><br><span class="line">    image: seafileltd&#x2F;elasticsearch-with-ik:5.6.16</span><br><span class="line">    container_name: seafile-elasticsearch</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    environment:</span><br><span class="line">      - discovery.type&#x3D;single-node</span><br><span class="line">      - bootstrap.memory_lock&#x3D;true</span><br><span class="line">      - &quot;ES_JAVA_OPTS&#x3D;-Xms1g -Xmx1g&quot;</span><br><span class="line">    deploy:</span><br><span class="line">      resources:</span><br><span class="line">        limits:</span><br><span class="line">          memory: 2048M</span><br><span class="line">    volumes:</span><br><span class="line">      - elasticsearch-data:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;data</span><br><span class="line">    networks:</span><br><span class="line">      - default</span><br><span class="line"></span><br><span class="line">  seafile:</span><br><span class="line">    image: docker.seafile.top&#x2F;seafileltd&#x2F;seafile-pro-mc:latest</span><br><span class="line">    container_name: seafile</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    ports:</span><br><span class="line">      - 10002:443</span><br><span class="line">    volumes:</span><br><span class="line">      - D:&#x2F;Docker&#x2F;seafile&#x2F;data:&#x2F;shared</span><br><span class="line">    environment:</span><br><span class="line">      - DB_HOST&#x3D;192.168.9.13</span><br><span class="line">      - DB_ROOT_PASSWD&#x3D;password</span><br><span class="line">      - TIME_ZONE&#x3D;Asia&#x2F;Shanghai</span><br><span class="line">      - SEAFILE_ADMIN_EMAIL&#x3D;example@gmail.com</span><br><span class="line">      - SEAFILE_ADMIN_PASSWORD&#x3D;password</span><br><span class="line">      - SEAFILE_SERVER_LETSENCRYPT&#x3D;false</span><br><span class="line">      - SEAFILE_SERVER_HOSTNAME&#x3D;domain.com</span><br><span class="line">    depends_on:</span><br><span class="line">      - memcached</span><br><span class="line">      - elasticsearch</span><br><span class="line">      - onlyoffice-document-server</span><br><span class="line">      - onlyoffice-redis</span><br><span class="line">    networks:</span><br><span class="line">      - default</span><br><span class="line"></span><br><span class="line">  onlyoffice-document-server:</span><br><span class="line">    container_name: onlyoffice-documentserver</span><br><span class="line">    image: onlyoffice&#x2F;documentserver:latest</span><br><span class="line">    stdin_open: true</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    environment:</span><br><span class="line">      - ONLYOFFICE_HTTPS_HSTS_ENABLED&#x3D;True									#启用HSTS</span><br><span class="line">      - SSL_CERTIFICATE_PATH&#x3D;&#x2F;var&#x2F;www&#x2F;onlyoffice&#x2F;Data&#x2F;certs&#x2F;fullchain.cer	#指定证书路径</span><br><span class="line">      - SSL_KEY_PATH&#x3D;&#x2F;var&#x2F;www&#x2F;onlyoffice&#x2F;Data&#x2F;certs&#x2F;private.key				#指定私钥路径</span><br><span class="line">      - REDIS_SERVER_HOST&#x3D;onlyoffice-redis</span><br><span class="line">      - REDIS_SERVER_PORT&#x3D;6379</span><br><span class="line">    deploy:</span><br><span class="line">      resources:</span><br><span class="line">        limits:</span><br><span class="line">          cpus: &#39;0.50&#39;						#限制最大CPU占用率</span><br><span class="line">          memory: 2048M						#限制最大内存</span><br><span class="line">    volumes:</span><br><span class="line">      - D:&#x2F;Docker&#x2F;onlyoffice&#x2F;DocumentServer&#x2F;logs:&#x2F;var&#x2F;log&#x2F;onlyoffice</span><br><span class="line">      - D:&#x2F;Docker&#x2F;onlyoffice&#x2F;DocumentServer&#x2F;data:&#x2F;var&#x2F;www&#x2F;onlyoffice&#x2F;Data</span><br><span class="line">      - D:&#x2F;Docker&#x2F;onlyoffice&#x2F;DocumentServer&#x2F;lib:&#x2F;var&#x2F;lib&#x2F;onlyoffice</span><br><span class="line">    ports:</span><br><span class="line">      - 10005:443							#服务访问端口, 80 HTTP, 443 HTTPS</span><br><span class="line">    depends_on:</span><br><span class="line">      - onlyoffice-redis</span><br><span class="line">    networks:</span><br><span class="line">      - seafile-net</span><br><span class="line"></span><br><span class="line">  onlyoffice-redis:</span><br><span class="line">    container_name: onlyoffice-redis</span><br><span class="line">    image: redis</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    networks:</span><br><span class="line">      - seafile-net</span><br><span class="line">    expose:</span><br><span class="line">      - &#39;6379&#39;</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  default:</span><br><span class="line">    external:</span><br><span class="line">      name: shared							#接入shared网络</span><br><span class="line">  </span><br><span class="line">volumes:</span><br><span class="line">  elasticsearch-data:</span><br></pre></td></tr></table></figure>

<p>通过访问<a href="https://example.com:10005/">https://domain.com:10005</a>可以查看Document Server运行状况，显示Document Server is running表示成功</p>
<h6 id="配置seahub-settings-py-1"><a href="#配置seahub-settings-py-1" class="headerlink" title="配置seahub_settings.py"></a>配置seahub_settings.py</h6><p>添加以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 开启 Only Office 服务</span><br><span class="line">ENABLE_ONLYOFFICE &#x3D; True</span><br><span class="line">VERIFY_ONLYOFFICE_CERTIFICATE &#x3D; True</span><br><span class="line">ONLYOFFICE_APIJS_URL &#x3D; &#39;https:&#x2F;&#x2F;domain.com:10005&#x2F;web-apps&#x2F;apps&#x2F;api&#x2F;documents&#x2F;api.js&#39;</span><br><span class="line">ONLYOFFICE_FILE_EXTENSION &#x3D; (&#39;doc&#39;, &#39;docx&#39;, &#39;ppt&#39;, &#39;pptx&#39;, &#39;xls&#39;, &#39;xlsx&#39;, &#39;odt&#39;, &#39;fodt&#39;, &#39;odp&#39;, &#39;fodp&#39;, &#39;ods&#39;, &#39;fods&#39;)</span><br><span class="line">ONLYOFFICE_EDIT_FILE_EXTENSION &#x3D; (&#39;docx&#39;, &#39;pptx&#39;, &#39;xlsx&#39;)</span><br></pre></td></tr></table></figure>

<h6 id="重启Seahub"><a href="#重启Seahub" class="headerlink" title="重启Seahub"></a>重启Seahub</h6><p>如果/shared/seafile/conf/seahub_settings.pyc已存在，删除该文件，运行命令重启Seahub (Seafile的网页端界面服务)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it seafile &#x2F;opt&#x2F;seafile&#x2F;seafile-server-latest&#x2F;seahub.sh restart</span><br></pre></td></tr></table></figure>

<h4 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h4><p><a href="https://cloud.seafile.com/published/seafile-manual-cn/maintain/backup_recovery.md">官方文档</a></p>
<h5 id="数据库备份"><a href="#数据库备份" class="headerlink" title="数据库备份"></a>数据库备份</h5><h6 id="通过计划任务-PowerShell-容器内shell脚本备份-数据库在容器内运行"><a href="#通过计划任务-PowerShell-容器内shell脚本备份-数据库在容器内运行" class="headerlink" title="通过计划任务 + PowerShell + 容器内shell脚本备份 (数据库在容器内运行)"></a>通过计划任务 + PowerShell + 容器内shell脚本备份 (数据库在容器内运行)</h6><p>/var/lib/mysql/backup.sh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#创建backup目录并备份多个数据库</span><br><span class="line">mkdir -p &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;backup</span><br><span class="line">cd &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;backup</span><br><span class="line">for i in ccnet_db seahub_db seafile_db;</span><br><span class="line">do</span><br><span class="line">    mkdir -p $i</span><br><span class="line">    mysqldump --user&#x3D;root --password&#x3D;password $i &gt; .&#x2F;$i&#x2F;$i&quot;_&quot;$(date +%Y%m%d_%H%M%S).sql</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>D:\database_backup\mariadbdump.ps1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#运行shell脚本, 复制.sql到备份盘, 清理backup目录</span><br><span class="line">docker exec -it mariadb &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;backup.sh</span><br><span class="line">Copy-Item -Recurse -Path &quot;C:\Docker\mariadb\backup\*&quot; -Destination &quot;D:\database_backup&quot;</span><br><span class="line">docker exec -it mariadb rm -r &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;backup</span><br></pre></td></tr></table></figure>

<p>设置Windows自带的计划任务，操作-启动程序-PowerShell，添加参数 D:\database_backup\mariadbdump.ps1</p>
<h6 id="通过bat备份-数据库在Windows系统上运行"><a href="#通过bat备份-数据库在Windows系统上运行" class="headerlink" title="通过bat备份 (数据库在Windows系统上运行)"></a>通过bat备份 (数据库在Windows系统上运行)</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@title MySQL backup start</span><br><span class="line">@echo off</span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line">@color 0a</span><br><span class="line">:: --------------------参数设置------------------------</span><br><span class="line">:: 设置时间变量</span><br><span class="line">set &quot;Ymd&#x3D;%date:~0,4%_%date:~5,2%_%date:~8,2%_%time:~0,2%_%time:~3,2%_%time:~6,2%&quot;</span><br><span class="line">:: 要备份的数据库名称，多个用空格分隔</span><br><span class="line">set DATABASES&#x3D;ccnet_db seafile_db seahub_db</span><br><span class="line">:: HOST IP</span><br><span class="line">set HOST&#x3D;127.0.0.1</span><br><span class="line">:: PROT 端口</span><br><span class="line">set PROT&#x3D;3306</span><br><span class="line">:: MySQL 用户名</span><br><span class="line">set USERNAME&#x3D;root</span><br><span class="line">:: MySQL 密码</span><br><span class="line">set PASSWORD&#x3D;password</span><br><span class="line">:: MySQL Bin 目录，加 \</span><br><span class="line">:: 如果可以直接使用 mysqldump（安装时添加 MySQL Bin 目录到了环境变量），此处留空即可</span><br><span class="line">set MYSQL&#x3D;</span><br><span class="line">:: WinRAR 自带命令行工具的可执行文件路径，长文件名注意用 Dos 长文件名书写方式</span><br><span class="line">set WINRAR&#x3D;C:\Progra~1\WinRAR\Rar.exe</span><br><span class="line">:: 备份天数</span><br><span class="line">set DT&#x3D;30</span><br><span class="line">:: 备份放置的盘，加 \</span><br><span class="line">set BACKUP_PATH&#x3D;D:\</span><br><span class="line">:: my.ini路径，加\</span><br><span class="line">set MYINI&#x3D;C:\mysql-winx64\</span><br><span class="line">:: 备份放置的路径，加 \</span><br><span class="line">set FILE&#x3D;mysql_backup\</span><br><span class="line">:: --------------------开始备份------------------------</span><br><span class="line">for %%D in (%DATABASES%) do (</span><br><span class="line">     if exist %BACKUP_PATH%%FILE%%%D (</span><br><span class="line">        echo 目录%BACKUP_PATH%%FILE%%%D已存在，无需创建</span><br><span class="line">    ) else (</span><br><span class="line">        echo 创建%BACKUP_PATH%%FILE%%%D        </span><br><span class="line">        md %BACKUP_PATH%%FILE%%%D</span><br><span class="line">    )</span><br><span class="line">    :: 备份</span><br><span class="line">    mysqldump --opt --single-transaction&#x3D;TRUE --user&#x3D;%USERNAME% --password&#x3D;%PASSWORD% --host&#x3D;%HOST% --protocol&#x3D;tcp --port&#x3D;%PROT% --default-character-set&#x3D;utf8 --single-transaction&#x3D;TRUE --routines --events &quot;%%D&quot; &gt; &quot;%BACKUP_PATH%%FILE%%%D\%%D_%Ymd%.sql&quot;</span><br><span class="line">)</span><br><span class="line">:: --------------------结束备份------------------------</span><br><span class="line">@echo on</span><br></pre></td></tr></table></figure>

<h5 id="资料库数据备份"><a href="#资料库数据备份" class="headerlink" title="资料库数据备份"></a>资料库数据备份</h5><p>备份/shared文件夹</p>
<h4 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h4><h5 id="恢复资料库数据"><a href="#恢复资料库数据" class="headerlink" title="恢复资料库数据"></a>恢复资料库数据</h5><p>根据Seafile的部署volume，将/shared文件夹复制到对应路径</p>
<h5 id="恢复数据库"><a href="#恢复数据库" class="headerlink" title="恢复数据库"></a>恢复数据库</h5><p>建议使用命令行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u[username] -p[password] ccnet-db &lt; ccnet-db.sql.2013-10-19-16-00-05</span><br><span class="line">mysql -u[username] -p[password] seafile-db &lt; seafile-db.sql.2013-10-19-16-00-20</span><br><span class="line">mysql -u[username] -p[password] seahub-db &lt; seahub-db.sql.2013-10-19-16-01-05</span><br></pre></td></tr></table></figure>

<h4 id="资料库修复-amp-文件导出"><a href="#资料库修复-amp-文件导出" class="headerlink" title="资料库修复&amp;文件导出"></a>资料库修复&amp;文件导出</h4><p><a href="https://docs.seafile.com/published/seafile-manual-cn/maintain/seafile_fsck.md">官方文档</a></p>
<p>Seafile 服务器包含了 <code>seafile-fsck</code> 工具来帮助你恢复这些毁坏的对象（类似于git-fsck工具）。这个工具将会进行如下三项工作：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 检查 Seafile 内部对象的完整性，并且删除毁坏的对象。</span><br><span class="line"><span class="bullet">2.</span> 恢复所有受影响的资料库到最近一致，可用的状态。</span><br><span class="line"><span class="bullet">3.</span> 导出数据库。</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">seafile-server-latest/seaf-fsck.sh [--repair|-r] [repo<span class="emphasis">_id_</span>1] [repo<span class="emphasis">_id_</span>2] ...</span><br></pre></td></tr></table></figure>

<p>seaf-fsck 有检查资料库完整性和修复损坏资料库两种运行模式。</p>
<hr>
<h5 id="检查资料库完整性"><a href="#检查资料库完整性" class="headerlink" title="检查资料库完整性"></a>检查资料库完整性</h5><p>执行 seaf-fsck.sh 不加任何参数将以<strong>只读</strong>方式检查所有资料库的完整性。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">seafile-server-latest/seaf-fsck.sh [library-id1] [library-id2] ...</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="修复损坏的资料库"><a href="#修复损坏的资料库" class="headerlink" title="修复损坏的资料库"></a>修复损坏的资料库</h5><p>fsck 修复损坏的资料库有如下两步流程:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 如果记录在数据库中的资料库当前状态无法在数据目录中找出，fsck 将会在数据目录中找到最近可用状态。</span><br><span class="line"><span class="bullet">2.</span> 检查第一步中可用状态的完整性。如果文件或目录损坏，fsck 将会将其置空并报告损坏的路径，用户便可根据损坏的路径来进行恢复操作。</span><br></pre></td></tr></table></figure>

<p>执行如下命令来修复所有资料库：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">seafile-server-latest/seaf-fsck.sh --repair</span><br></pre></td></tr></table></figure>

<p>大多数情况下我们建议你首先以只读方式检查资料库的完整性，找出损坏的资料库后，执行如下命令来修复指定的资料库：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">seafile-server-latest/seaf-fsck.sh --repair [library-id1] [library-id2] ...</span><br></pre></td></tr></table></figure>

<p>seaf-fsck 会自动将改资料库的所有同步客户端解除同步。用户需要重新同步该资料库。seaf-fsck 也会在资料库的历史中添加一个损坏文件和目录的列表，便于用户找到损坏的路径。</p>
<hr>
<h5 id="将资料库导出到文件系统"><a href="#将资料库导出到文件系统" class="headerlink" title="将资料库导出到文件系统"></a>将资料库导出到文件系统</h5><p>4.2.0版本以后，您可以使用seaf-fsck将资料库中的所有文件导出到外部文件系统(如Ext4)。该程序不依赖于 seafile 数据库。只要你有 seafile-data 目录，你可以随时将文件从seafile导出到外部文件系统。</p>
<p>命令语法是</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">seafile-server-latest/seaf-fsck.sh --export top<span class="emphasis">_export_</span>path [library-id1] [library-id2] ...</span><br></pre></td></tr></table></figure>

<p>参数 top_export_path 是放置导出文件的目录。每个资料库将导出为导出目录的子目录。如果不指定资料库的ID，将导出所有库。</p>
<p>目前只能导出未加密的资料库，加密资料库将被跳过。</p>
<h4 id="垃圾清理-amp-回收"><a href="#垃圾清理-amp-回收" class="headerlink" title="垃圾清理&amp;回收"></a>垃圾清理&amp;回收</h4><p>Seafile 利用存储去重技术来减少存储资源的利用。 简单来说，这包含如下两层含义：</p>
<ul>
<li>不同版本的文件或许会共享一些数据块。</li>
<li>不同的资料库也或许会共享一些数据块。</li>
</ul>
<p>垃圾回收程序将会清理如下两种无用数据块：</p>
<ol>
<li>未被资料库所引用的数据块即数据块属于被删除的资料库。</li>
<li>设置了历史长度限制的资料库的过期数据块。</li>
</ol>
<h5 id="Dry-run-模式"><a href="#Dry-run-模式" class="headerlink" title="Dry-run 模式"></a>Dry-run 模式</h5><p>如果仅为了查看有多少垃圾可以回收而不进行删除操作，用 dry-run 选项：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">seafile-server-latest/seaf-gc.sh --dry-run [repo-id1] [repo-id2] ...</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="删除垃圾数据块"><a href="#删除垃圾数据块" class="headerlink" title="删除垃圾数据块"></a>删除垃圾数据块</h5><p>运行垃圾回收程序，不加 –dry-run 选项来删除垃圾数据块：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">seafile-server-latest/seaf-gc.sh [repo-id1] [repo-id2] ...</span><br></pre></td></tr></table></figure>

<p>如果在参数中指定资料库 ID, 则程序只检查和删除指定的资料库。</p>
<p>正如前面所说，有两种类型的垃圾数据块可被回收，有时仅删除第一类无用数据块（属于删除的资料库）便可达到回收的目的，这种情况下，垃圾回收程序将不会检查未被删除的资料库，加入 “-r” 选项便可实现这个功能：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">seafile-server-latest&#x2F;seaf-gc.sh -r</span><br></pre></td></tr></table></figure>

<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>主要优点：</p>
<ul>
<li><p>Seafile基于C语言，运行速度和稳定性都比基于PHP的NextCloud要好</p>
</li>
<li><p>用户可创建加密数据库，所有数据在服务器加密</p>
</li>
<li><p>数据在服务器上被分块存储，支持增量同步</p>
</li>
<li><p>支持在线预览mp4电影，在线编辑txt、Markdown</p>
</li>
<li><p>默认支持保存文件历史，方便回滚</p>
</li>
</ul>
<p>主要缺点：</p>
<ul>
<li>数据基于分块存储，意味着不能在服务器上直接查看&amp;备份原始文件</li>
<li>基于分块存储，随着使用会不可避免地产生垃圾数据块</li>
</ul>
]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
</search>
